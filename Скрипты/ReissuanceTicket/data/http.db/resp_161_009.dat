define({"742":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_rollback.htm",l:-1,t:"lrd_rollback",i:0.000193530728447808,a:"Performs a rollback on the database. LRDRET lrd_rollback( LRD_CONTEXT *mptContext,LRD_CONNECTION *mptConnection, int miDBErrorSeverity ); The lrd_rollback function rolls back the current database transaction to the last Savepoint. For more details refer to the Function Header File lrd.h in the ..."},"743":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_row_cnt.htm",l:-1,t:"lrd_row_count",i:0.00021194032613096,a:"Returns the number of the rows affected by an UPDATE, DELETE or INSERT statement. LRDRET lrd_row_count( LRD_CURSOR * mptCursor, long * mpliRowCount, int miDBErrorSeverity ); The lrd_row_count function returns the number of the rows affected by an UPDATE, DELETE or INSERT statement. It is only ..."},"744":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_save_col.htm",l:-1,t:"lrd_save_col",i:0.000390576907656992,a:"Saves the value of a table cell. LRDRET lrd_save_col( LRD_CURSOR *mptCursor, unsigned int muiColNum, long mliRowNum, unsigned long muliOption, char *mpszParamName ); The lrd_save_col function saves the dynamic value of a specified table cell and assigns it to a parameter. This function is used for ..."},"745":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_save_lstr.htm",l:-1,t:"lrd_save_last_rowid",i:0.000215899014727015,a:"Saves a rowid value to a parameter. (Oracle only) LRDRET lrd_save_last_rowid( LRD_CURSOR *mptCursor, char *mpszParamName ); The lrd_save_last_rowid function saves the rowid of the last row of the current result set, to a parameter. The last rowid value can be used at a later point in the script. ..."},"746":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_save_r_p.htm",l:-1,t:"lrd_save_ret_param",i:0.000215899014727015,a:"Saves a return-parameter to a parameter LRDRET lrd_save_ret_param( LRD_CURSOR *mptCursor, unsigned int muiRetParamNum, unsigned long muliOption, char *mpszParamName ); The lrd_save_ret_param function saves the value of a stored procedure\u0027s return-parameter, to a parameter. If the function cannot ..."},"747":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_save_val.htm",l:-1,t:"lrd_save_value",i:0.000306637711154224,a:"Saves the value of a placeholder descriptor. LRDRET lrd_save_value( LRD_VAR_DESC *mptVarDesc, unsigned long muIiIndex, unsigned long muliOption, char *mpszParamName ); The lrd_save_value function saves the dynamic value of a placeholder descriptor. This function is used for Correlating Database ..."},"748":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_send_data.htm",l:-1,t:"lrd_send_data",i:0.000221995775823332,a:"Sends data to the server. (CtLib only) LRDRET lrd_send_data( LRD_CURSOR *mptCursor, unsigned int muiUnused, unsigned long muliIODescNum, char *mpszReqSpec, LRD_VAR_DESC *mptVarDesc, int miDBErrorSeverity ); The lrd_send_data function sends a block of data to the server. The location of the data is ..."},"749":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_serv_att.htm",l:-1,t:"lrd_server_attach",i:0.000181405658798863,a:"Creates an access path to a data source for database operations. (Oracle 8.0 and later) LRDRET lrd_server_attach( void *mpvLRDDBIHandleServer, char *mpcServerID, long mliServerIDLen, long mliMode, int miDBErrorSeverity ); The lrd_server_attach function creates an access path to a data source for ..."},"750":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_serv_det.htm",l:-1,t:"lrd_server_detach",i:0.000181405658798863,a:"Deletes an access path to a data source. (Oracle 8.0 and later) LRDRET lrd_server_detach( void const * mpvLRDDBIHandleServer, long const mliMode, int const miDBErrorSeverity ); The lrd_server_detach function deletes an access path to a data source for database operations. This function is only ..."},"751":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_sess_beg.htm",l:-1,t:"lrd_session_begin",i:0.000181405658798863,a:"Creates and begins a user session for a server. (Oracle 8 and later) LRDRET lrd_session_begin( void *mpvLRDDBIHandleSvcCtx, void *mpvLRDDBIHandleSession, unsigned long muliCredentials, long mliMode, int miDBErrorSeverity ); The lrd_session_begin function and begins a user session for a server. This ..."},"752":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_sess_end.htm",l:-1,t:"lrd_session_end",i:0.000181405658798863,a:"Ends a user session for a server. (Oracle 8 and later) LRDRET lrd_session_end( void const *mpvLRDDBIHandleSvcCtx, void const *mpvLRDDBIHandleSession, long const mliMode, int const miDBErrorSeverity ); The lrd_session_end function ends a user session for a server. This function is only supported for ..."},"753":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_stmt.htm",l:-1,t:"lrd_stmt",i:0.000299100862581295,a:"Sets an SQL statement to be processed. LRDRET lrd_stmt( LRD_CURSOR *mptCursor, char *mpcText, long mliTextLen, LRDOS_INT4 mjOpt1, LRDOS_INT4 mjOpt2, int miDBErrorSeverity ); The lrd_stmt function associates a character string (usually an SQL statement) with a cursor.  Note that when working with ..."},"754":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_lrd_to_Prntbl.htm",l:-1,t:"lrd_to_printable",i:0.000280466078896265,a:"Converts a variable to a printable string. LRDRET lrd_to_printable( LRD_VAR_DESC *mptVarDesc, unsigned long muliIndex, char *mpszOutputStr, unsigned long muliOutputStrSize, char *mpszOutputStrFmt ); The lrd_to_printable function converts a variable or an array element to a printable string. This ..."},"755":{y:0,u:"../Content/FuncRef/Database/etc/lrFuncRef_DBS_Access_Man_Funcs.htm",l:-1,t:"Access Management Functions",i:0.000904299314637016,a:"Access Management Functions Click one of the following functions for more information:"},"756":{y:0,u:"../Content/FuncRef/Database/etc/lrFuncRef_DBS_Cor_Sttmnts_Funcs.htm",l:-1,t:"Correlating Statements Functions",i:0.000383507685328236,a:"Correlating Statements Functions Click one of the following functions for more information:"},"757":{y:0,u:"../Content/FuncRef/Database/etc/lrFuncRef_DBS_Data_Types.htm",l:-1,t:"Data Types",i:0.000143590457680705,a:"Data Types Several VuGen functions, such as lrd_bind_col and Ird_bind_placeholder, require you to specify a data type. For additional information about data types, see the lrdtypes.h file supplied with VuGen. VuGen supports the following types:"},"758":{y:0,u:"../Content/FuncRef/Database/etc/lrFuncRef_DBS_Errors.htm",l:-1,t:"Errors",i:0.00128418379995389,a:"Errors"},"759":{y:0,u:"../Content/FuncRef/Database/etc/lrFuncRef_DBS_Information.htm",l:-1,t:"Information",i:0.00128418379995389,a:"Information"},"760":{y:0,u:"../Content/FuncRef/Database/etc/lrFuncRef_DBS_Internal_Errors.htm",l:-1,t:"Internal Errors",i:0.00128418379995389,a:"Internal Errors For all internal return codes, call technical support for assistance. "},"761":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_LRD_Env_Funcs.htm",l:-1,t:"LRD Environment Functions",i:0.00050772282484898,a:"LRD Environment Functions Click one of the following functions for more information:"},"762":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_LRD_Return_Values.htm",l:-1,t:"LRD Return Values",i:0.00542037647793478,a:"The following is a list of error codes returned by the LRD functions. The error codes are also described in the lrd.h file supplied with VuGen.  There are four return codes types, represented by numerical ranges: Each code name has a prefix indicating the nature of the return code:  Information ..."},"763":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_Oracle8_Function.htm",l:-1,t:"Oracle 8.0 Functions",i:0.00193538911319295,a:"Oracle 8.0 Functions VuGen supports most of the functionality of Oracle 8.x. Note that the standard database actions are recorded with an additional ora8 prefix. For example, lrd_ora8_fetch performs a fetch operation in Oracle 8.x. Click one of the following functions for more information:"},"764":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_Ret_Hndlng_Funcs.htm",l:-1,t:"Retrieval Handling Functions",i:0.000820975935109652,a:"Retrieval Handling Functions Click one of the following functions for more information:"},"765":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_Sttmnt_Hndlng_Funcs.htm",l:-1,t:"Statement Handling Functions",i:0.00103049210075896,a:"Statement Handling Functions Click one of the following functions for more information:"},"766":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_Var_Hndlng_Funcs.htm",l:-1,t:"Variable Handling Functions",i:0.000762431662849293,a:"Variable Handling Functions Click one of the following functions for more information:"},"767":{y:0,u:"../Content/FuncRef/Database/lrFuncRef_DBS_Warnings.htm",l:-1,t:"Warnings",i:0.00128418379995389,a:"Warnings"},"768":{y:0,u:"../Content/FuncRef/dns/lrFuncRef_DNS_DNS_Functions.htm",l:-1,t:" DNS Functions (MS_DNS)",i:0.000424601776959271,a:" DNS Functions (MS_DNS) DNS Vuser functions record activity to and from the DNS server. Each DNS function begins with a ms_dns prefix. Click one of the following functions for more information:"},"769":{y:0,u:"../Content/FuncRef/dns/lrFuncRef_DNS_Alphbtcl_List_Funcs.htm",l:-1,t:" Alphabetical List of Functions",i:0.000132341366777373,a:" Alphabetical List of Functions Click one of the following functions for more information:"},"770":{y:0,u:"../Content/FuncRef/dns/lrFuncRef_DNS_ms_dns_nrslt.htm",l:-1,t:"ms_dns_nextresult",i:0.000515747912835544,a:"Advances to the next IP address in the list returned by ms_dns_query. char* ms_dns_nextresult( char *ipaddresslist ); The ms_dns_nextresult function looks up the next IP address in the list of IP addresses, that were returned by  ms_dns_query . A script that calls ms_dns_nextresultmust have an ..."},"771":{y:0,u:"../Content/FuncRef/dns/lrFuncRef_DNS_ms_dns_query.htm",l:-1,t:"ms_dns_query",i:0.000515747912835544,a:"Resolves the IP address of a host. char *ms_dns_query( char *transaction,  char *dnsserverURL, [char*  IPversion], [char *query_host,] [char *local_address,] LAST );  The ms_dns_query function resolves the IP address(es) of the specified host name, using a Domain Name Service (DNS). This function ..."},"772":{y:0,u:"../Content/FuncRef/flex/etc/lrFuncRef_FL_Flex_Functions.htm",l:-1,t:"Alphabetical Listing of Flex Functions (FLEX)",i:0.00104934345297575,a:"Alphabetical Listing of Flex Functions (FLEX) Flex Vuser scripts emulate communication between a Flex client and a Flex application.  Click one of the following functions for more information:"},"773":{y:0,u:"../Content/FuncRef/flex/etc/lrFuncRef_FL_Alphbtcl_List_Funcs.htm",l:-1,t:"Flex AMF Alphabetical Listing",i:0.0008277125340787,a:"Flex AMF Alphabetical Listing Click one of the following functions for more information:    "},"774":{y:0,u:"../Content/FuncRef/flex/etc/lrFuncRef_FL_Flex_AMF_Functions.htm",l:-1,t:"Flex / AMF Functions (FLEX)",i:0.000132341366777373,a:"Flex / AMF Functions (FLEX) Click one of the following functions for more information:"},"775":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_amf_call.htm",l:-1,t:"flex_amf_call",i:0.000532282963315384,a:"Sends a Flex AMF request. int flex_amf_call( \u003cStepName\u003e, \u003cList of Attributes\u003e,   [\"IsParseResponse=\u003cyes/no\u003e\",]  MESSAGE, \"Method=\u003cmethod name\u003e\", \"TargetObjectId=\u003ctarget name\u003e\", [\"EnvelopeHeaderSetId=\u003cheader set name\u003e\",]   BEGIN_ARGUMENTS, \u003cArgument List\u003e, END_ARGUMENTS, [,MESSAGE, \u003cmessage section ..."},"776":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_amf_define_envlp_headr_set.htm",l:-1,t:"flex_amf_define_envelope_header_set",i:0.000291979325976206,a:"Defines a set of FLex AMF envelope headers. int flex_amf_define_envelope_header_set( \"ID=\u003cheader set name\u003e\", HEADER,  \"\u003cXML string describing the header\u003e\", [HEADER, \"\u003cheader 2\u003e\",..., HEADER, \"\u003cheader n\u003e\",] LAST );  This function returns LR_PASS (0) on success or LR_FAIL (1) on failure. Note that ..."},"777":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_amf_define_header_set.htm",l:-1,t:"flex_amf_define_header_set",i:0.000291979325976206,a:"Defines a set of Flex AMF headers. int flex_amf_define_header_set( \"ID=\u003cFlex AMF header set name\u003e\",  HEADER, \"Name=\u003cheader name\u003e\",  \"MustUnderstand=\u003cboolean value\u003e\", \"Data=\u003cXML string describing the header data\u003e\",  [ HEADER, \u003cheader section 2\u003e,  ... HEADER, \u003cheader section n\u003e,] LAST ); This function ..."},"778":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_login.htm",l:-1,t:"flex_login",i:0.000241707613029548,a:"Logs on to a password-protected Flex application.  int flex_login( \"stepname\", \"URL=\u003caddress\u003e\", \"Snapshot=\u003csnapshot file\u003e\",   [\"IsParseResponse=\u003cyes/no\u003e\",] \"Username=\u003cuser name\u003e\",  \"Password=\u003cpassword\u003e\", [\"ResponseParameter={parameter name},] LAST ); This function returns LR_PASS (0) on success or ..."},"779":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_logout.htm",l:-1,t:"flex_logout",i:0.000241707613029548,a:"Logs off of a password-protected Flex application.  int flex_logout( \"stepname\",  \"URL=\u003caddress\u003e\", \"Snapshot=\u003csnapshot file\u003e\",  [\"IsParseResponse=\u003cyes/no\u003e\",] [\"ResponseParameter={parameter name},] LAST ); This function returns LR_PASS (0) on success or LR_FAIL (1) on failure. Note that LR_PASS and ..."},"780":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_ping.htm",l:-1,t:"flex_ping",i:0.000241707613029548,a:"Checks if a Flex application is available.  int flex_ping( \"stepname\", \"Snapshot=\u003csnapshot file\u003e\", \"URL=\u003caddress\u003e\", [\"IsParseResponse=\u003cyes/no\u003e\",] [\"ResponseParameter={parameter name},] [\"DSId=\u003cDSId value\u003e\" ,]  LAST ); This function returns LR_PASS (0) on success or LR_FAIL (1) on failure. Note that ..."},"781":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_remoting_call.htm",l:-1,t:"flex_remoting_call",i:0.000241707613029548,a:"Invokes one or more methods of server-side Remote objects (RPC). int flex_remoting_call( \"stepname\", \"URL={address}\", [\"Snapshot={snapshot file}\",]  [\"ResponseParameter={parameter name},] [\"IsParseResponse=\u003cyes/no\u003e\",] INVOCATION, \"Target={target}\", \"Operation={operation}\",  ..."},"782":{y:0,u:"../Content/FuncRef/flex/lrFuncRef_FL_flex_web_request.htm",l:-1,t:"flex_web_request",i:0.00026013394445018,a:"Use  web_custom_request .   Allows you to create a custom HTTP request with any method supported by HTTP.  int flex_web_request( const char *RequestName, \u003cList of Attributes\u003e,  LAST );  This function returns LR_PASS (0) on success or LR_FAIL (1) on failure. Note that LR_PASS and LR_FAIL generally ..."},"783":{y:0,u:"../Content/FuncRef/flex/etc/lrFuncRef_FL_Flex_RTMP_Functions.htm",l:-1,t:"Flex - RTMP Functions (FLEX_RTMP)",i:0.000132341366777373,a:"Flex - RTMP Functions (FLEX_RTMP) Click one of the following functions for more information:"},"784":{y:0,u:"../Content/FuncRef/flex/lrFuncRef_FL_flex_rtmp_connect.htm",l:-1,t:"flex_rtmp_connect",i:0.000430309857591048,a:"Connects a client to an RTMP server. int flex_rtmp_connect( const char *stepname, \"Host=\u003chost:port\u003e\",  [\"Snapshot=\u003csnapshot_file\u003e\",] \"ConnectionID=\u003cconnection_identifier\u003e\", \"ResponseParameter=\u003cresp_param\u003e\", MESSAGE, \"DataType=\u003cdata_type\u003e\", \"ChunkStreamID=\u003cid\u003e\", \"MessageStreamID=\u003cstream\u003e\", ..."},"785":{y:0,u:"../Content/FuncRef/flex/lrFuncRef_FL_flex_rtmp_disconnect.htm",l:-1,t:"flex_rtmp_disconnect",i:0.00024639473423927,a:"Disconnects a client from an RTMP server. int flex_rtmp_disconnect( const char *stepname, \"ConnectionID=\u003cconnection identifier\u003e\", LAST ); This function returns LR_PASS (0) on success or LR_FAIL (1) on failure. Note that LR_PASS and LR_FAIL generally indicate whether the function call completed ..."},"786":{y:0,u:"../Content/FuncRef/flex/lrFuncRef_FL_flex_rtmp_receive.htm",l:-1,t:"flex_rtmp_receive",i:0.000360497357808737,a:"Receives responses from an RTMP server. int flex_rtmp_receive( const char *stepname, \"ConnectionID=\u003cconnection identifier\u003e\", [\"Quantifier=ALL | ANY\",][\"Timeout=\u003ctimeout\u003e\",][\"Snapshot=\u003csnapshot_file\u003e\",][\"ResponseParameter=\u003cresp_param\u003e\",] CHANNEL, \"ChunkStreamID=\u003cid\u003e\", ..."},"787":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_rtmp_receive_stream.htm",l:-1,t:"flex_rtmp_receive_stream",i:0.000312883044352174,a:"Receives streaming data from an RTMP server. int flex_rtmp_receive_stream( const char *stepname, \"ConnectionID=\u003cconnection identifier\u003e\", [\"Snapshot=\u003csnapshot_file\u003e\",][\"ResponseParameter=\u003cresp_param\u003e\",] [\"Timeout=\u003ctimeout\u003e\",] [\"ContinueToNextStepAfter=\u003cmsec\u003e\",] ..."},"788":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_rtmp_reg_save_param_xpath.htm",l:-1,t:"flex_rtmp_reg_save_param_xpath",i:0.000525983549507582,a:"Registers a request to save dynamic data in an HTML buffer that has been formatted as XML. The data is saved to a parameter. C Language int flex_rtmp_reg_save_param_xpath( \"ParamName=\u003coutput parameter name\u003e\", \"QueryString=\u003cXpath\u003e\", [\"SelectAlL=\u003cYes|No\u003e\",] [\"Notfound=\u003cerror|warning\u003e,] LAST );  Return ..."},"789":{y:0,u:"../Content/FuncRef/flex/lrFuncRef_FL_flex_rtmp_send.htm",l:-1,t:"flex_rtmp_send",i:0.000536947501415214,a:"Sends a request to an RTMP server. int flex_rtmp_send( const char *stepname, \"ConnectionID=\u003cconnection identifier\u003e\", [\"Snapshot=\u003csnapshot_file\u003e\",] MESSAGE, \"DataType=\u003cdata_type\u003e\",[\"EventType=\u003ctype\u003e,\"] \"ChunkStreamID=\u003cid\u003e\", \"MessageStreamID=\u003cstream\u003e\", \"Argument=\u003cargument\u003e\", MESSAGE, ... ... ... LAST ..."},"790":{y:0,u:"../Content/FuncRef/flex/etc/lrFuncRef_FL_Flex_Tunnneled_Functions.htm",l:-1,t:"Flex - RTMP Tunneled Functions (FLEX_RTMP_TUNNELED)",i:0.000132341366777373,a:"Flex - RTMP Tunneled Functions (FLEX_RTMP_TUNNELED) Click one of the following functions for more information:"},"791":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_rtmp_tunneled_connect.htm",l:-1,t:"flex_rtmp_tunneled_connect",i:0.000445908175375313,a:"Connects a client to an RTMP server over HTTP. int flex_rtmp_tunneled_connect( const char *stepname, \"Gateway=URL\",  [\"Snapshot=\u003csnapshot_file\u003e\",] \"SessionID=\u003csession_identifier\u003e\", [\"SendIdentReq=\u003cyes/no\u003e\",] MESSAGE, \"DataType=\u003cdata_type\u003e\", \"ChunkStreamID=\u003cid\u003e\", \"MessageStreamID=\u003cstream\u003e\", ..."},"792":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_rtmp_tunneled_disconnect.htm",l:-1,t:"flex_rtmp_tunneled_disconnect",i:0.000265143219078157,a:"Disconnects an HTTP client from  an RTMP server. int flex_rtmp_tunneled_disconnect( const char *stepname, \"SessionID=\u003csession identifier\u003e\", LAST ); This function returns LR_PASS (0) on success or LR_FAIL (1) on failure. Note that LR_PASS and LR_FAIL generally indicate whether the function call ..."},"793":{y:0,u:"../Content/FuncRef/flex/lrFr_flex_rtmp_tunneled_send.htm",l:-1,t:"flex_rtmp_tunneled_send",i:0.000497125548257596,a:"Sends a request to an RTMP server over HTTP. int flex_rtmp_tunneled_send( const char *stepname, \"SessionID=\u003csession identifier\u003e\", [\"Snapshot=\u003csnapshot_file\u003e\",]   [\"ContinueToNextStepAfter=\u003cmsec\u003e\",]  [ContinueMode=\u003cAbsoluteTimestamp|DeltaFromNow\u003e,] MESSAGE, ..."},"794":{y:0,u:"../Content/FuncRef/flex/etc/lrFuncRef_FL_AMF_Arguments.htm",l:-1,t:"AMF Arguments",i:0.00024465931099159,a:"The Flex AMF protocol function arguments are the arguments of the invoked method. Each argument is defined as an XML string, with no preceding keyword. For example: \u003cstrictArray length=\\\"8\\\"\u003e\u003cboolean\u003etrue\u003c/boolean \u003e....\u003c/strictArray\u003e It is recommended that you edit the arguments in the VuGen tree ..."},"795":{y:0,u:"../Content/FuncRef/flex/etc/lrFuncRef_FL_List_Resource_Attrbts.htm",l:-1,t:"List of Resource Attributes",i:0.000150767698198004,a:"A list of resources generated by non–HTML mechanisms in the web page. These include the resources requested by Javascript, ActiveX, Java applets and Flash. VuGen\u0027s Recording Options allow these elements either to be recorded within the current script step (the default mode) or recorded as separate ..."},"796":{y:0,u:"../Content/FuncRef/ftp/etc/lrFuncRef_ftp_Vuser_Functions.htm",l:-1,t:"FTP Vuser Functions (FTP)",i:0.00154494393799792,a:"FTP Vuser Functions (FTP) FTP Vuser functions record activity to and from an ftp server. Each FTP function begins with an ftp prefix. Click one of the following functions for more information:"},"797":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_delete.htm",l:-1,t:"ftp_delete",i:0.000221196668792312,a:"Deletes a file from an FTP server. int ftp_delete( char *transaction, \u003citem list\u003e, LAST ); Function  objFTP .delete( transaction as String, item_list as String, LAST ) as Integer         ` for VB Script The ftp_delete function deletes a file or files from an FTP server.  This function is for use ..."},"798":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_delete_ex.htm",l:-1,t:"ftp_delete_ex",i:0.000182429985089743,a:"Deletes a file from an FTP server for a specific session. int ftp_delete_ex( FTP *ppftp, char *transaction, \u003citem list\u003e, LAST ); Function  objFTP .delete_ex( ppftp as FTP, transaction as String, item_list as String, LAST ) as Integer         ` for VB Script The ftp_delete_ex function deletes a file ..."},"799":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_dir.htm",l:-1,t:"ftp_dir",i:0.000219795540601156,a:"Runs the dir command on the FTP server. int ftp_dir( char *transaction, \u003citem list\u003e, LAST ); Function  objFTP .dir( transaction as String, item_list as String, LAST ) as Integer         ` for VB Script The ftp_dir function runs the dir command on the FTP server.  This function is for use with global ..."},"800":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_dir_ex.htm",l:-1,t:"ftp_dir_ex",i:0.000219795540601156,a:"Runs the dir command on the FTP server for a specific session. int ftp_dir_ex( FTP *ppftp, char *transaction, \u003citem list\u003e, LAST ); Function  objFTP .dir_ex( ppftp as FTP, transaction as String, item list as String, LAST ) as Integer         ` for VB Script The ftp_dir_ex function runs the dir ..."},"801":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_get.htm",l:-1,t:"ftp_get",i:0.000219795540601156,a:"Gets a file from an FTP server. int ftp_get( char *transaction, \u003citem list\u003e, LAST ); Function  objFTP .get( transaction as String, item_list as String, LAST) as Integer    \u0027 for VB Script The ftp_get function gets the working directory on the FTP server.  This function is for use with global ..."},"802":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_get_ex.htm",l:-1,t:"ftp_get_ex",i:0.000219795540601156,a:"Gets a file from an FTP server for a specific session. int ftp_get_ex( FTP *ppftp, char *transaction, \u003citem list\u003e, LAST ); Function  objFTP .get_ex( ppftp as FTP, transaction as String, item_list as String, LAST) as Integer    \u0027 for VB Script The ftp_get_ex function gets the working directory on the ..."},"803":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_get_last_dwn_dtls.htm",l:-1,t:"ftp_get_last_download_details",i:0.000254554347706482,a:"Gets the duration and received byte count of the last ftp_get call. int ftp_get_last_download_details( unsigned long * pByteCount, unsigned long *pDuration ); ftp_get_last_download_details gets statistics of the last download. It assigns the total download duration in milliseconds to the long ..."},"804":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_get_last_download_dtails_ex.htm",l:-1,t:"ftp_get_last_download_details_ex",i:0.000254554347706482,a:"Gets the duration and received byte count of the last ftp_get call in the session. int ftp_get_last_download_details_ex( FTP *ppFtp, unsigned long * pByteCount, unsigned long * pDuration ); ftp_get_last_download_details_ex gets statistics of the last download in the session. It assigns the total ..."},"805":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_get_last_error.htm",l:-1,t:"ftp_get_last_error",i:0.000182429985089743,a:"Retrieves the last error received from the FTP server. char *ftp_get_last_error( FTP *ppftp ); Function  objFTP .get_last_error( ppfttp as FTP) as String      ` for VB Script The ftp_get_last_error function returns the most recent error that occurred during the FTP session. Return Values This ..."},"806":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_get_last_error_id.htm",l:-1,t:"ftp_get_last_error_id",i:0.000182429985089743,a:"Retrieves the last error received from the FTP server. int ftp_get_last_error_id( FTP *ppftp ); Function  objFTP .get_last_error_id( ppfttp as FTP ) as Integer      ` for VB Script The ftp_get_last_error_id function returns the ID number of the most recent error that occurred during the specified ..."},"807":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_get_lsthndshk_drtn.htm",l:-1,t:"ftp_get_last_handshake_duration",i:0.000182429985089743,a:"ftp_get_last_handshake_duration Returns the duration of the most recent connection creation. double ftp_get_last_handshake_duration( ); ftp_get_last_handshake_duration returns the duration of the last connection creation in milliseconds."},"808":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_get_last_handshake_durtn_ex.htm",l:-1,t:"ftp_get_last_handshake_duration_ex",i:0.000182429985089743,a:"Returns the duration of the most recent connection creation for a specific session. double ftp_get_last_handshake_duration_ex( FTP *ppFtp ); ftp_get_last_handshake_duration_ex returns the duration of the last connection creation in the session in milliseconds. The ppFtp argument is the address of ..."},"809":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_get_lsttrnsfr_drtn.htm",l:-1,t:"ftp_get_last_transfer_duration",i:0.000254554347706482,a:"Returns the net file transfer time. double ftp_get_last_transfer_duration( ); ftp_get_last_transfer_duration returns the net transfer time for the last get command in milliseconds. The net transfer duration does not include the connection overhead. To get the total transfer time, use  ..."},"810":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_get_last_transfer_duratn_ex.htm",l:-1,t:"ftp_get_last_transfer_duration_ex",i:0.000254554347706482,a:"Returns the net file transfer time for the specific session. double ftp_get_last_transfer_duration_ex( FTP *ppftp ); ftp_get_last_transfer_duration_ex returns the net transfer time for the last get command for this session in milliseconds. The net transfer duration does not include the connection ..."},"811":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_logon.htm",l:-1,t:"ftp_logon",i:0.000271039792541437,a:"Performs a login to an FTP server. int ftp_logon( char *transaction, char *url, [attributes,] LAST ); Function  objFTP .logon( transaction as String, url as String, ByVal attributes As Variant, LAST ) as Integer    ` for VB Script The ftp_logon function performs a login to an FTP server.  This ..."},"812":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_logon_ex.htm",l:-1,t:"ftp_logon_ex",i:0.000271039792541437,a:"Logs onto an FTP server for a specific session. int ftp_logon_ex( FTP *ppftp, char *transaction, char *url, [attributes,] LAST ); Function  objFTP .logon_ex( ppftp as FTP, transaction as String, url as String, ByVal attributes As Variant, LAST ) as Integer    ` for VB Script The ftp_logon_ex ..."},"813":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_logout.htm",l:-1,t:"ftp_logout",i:0.00023165765589624,a:"Performs a logout from an FTP server. int ftp_logout ( ); Function  objFTP .logout( ) as Integer      `for VB Script The ftp_logout function performs a logout from an FTP server.  This function is for use with global sessions. For multiple sessions, use the  ftp_logout_ex  function, which allows you ..."},"814":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_logout_ex.htm",l:-1,t:"ftp_logout_ex",i:0.00023165765589624,a:"Performs a logout from an FTP server for a specific session. int ftp_logout_ex(FTP *ppftp ); Function  objFTP .logout_ex( ppftp as FTP ) as Integer      `for VB Script The ftp_logout_ex function logs out of an FTP server for a specific session.  This function is for use with multiple sessions. For ..."},"815":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_mkdir.htm",l:-1,t:"ftp_mkdir",i:0.00023165765589624,a:"Creates a directory on the FTP server machine  int ftp_mkdir( char *transaction, char *path ); Function  objFTP .mkdir( transaction as String, path as String ) as Integer    ` for VB Script The ftp_mkdir function creates a directory on the FTP server.  This function is for use with global sessions. ..."},"816":{y:0,u:"../Content/FuncRef/ftp/lrFr_ftp_mkdir_ex.htm",l:-1,t:"ftp_mkdir_ex",i:0.00023165765589624,a:"Creates a directory on the FTP server machine for a specific session. int ftp_mkdir_ex( FTP *ppftp, char *transaction, char *path ); Function  objFTP .mkdir_ex( ppftp asFTP, transaction as String, path as String ) as Integer    ` for VB Script The ftp_mkdir_ex function creates a directory on the FTP ..."},"817":{y:0,u:"../Content/FuncRef/ftp/lrFuncRef_ftp_put.htm",l:-1,t:"ftp_put",i:0.000219795540601156,a:"Uploads a file to the FTP server. int ftp_put( char *transaction, \u003citem list\u003e LAST ); Function  objFTP .put( transaction as String, item_list as String, LAST ) as Integer     `for VB , VB Script The ftp_put function uploads a file to the FTP server.  If the source prefix is \"ftpfile_\", during test ..."},});