define({"891":{y:0,u:"../Content/FuncRef/js_web/categories/lrFr_JS_Web_Correlation_Funcs.htm",l:-1,t:"Correlation Functions for JavaScript",i:0.000875687680801371,a:"Correlation Functions for JavaScript Click one of the following functions for more information:   See also:  Correlation Functions for C Correlation Functions for Java"},"892":{y:0,u:"../Content/FuncRef/js_web/categories/lrFr_JS_Data_Format_Funcs.htm",l:-1,t:"Data Format Functions",i:0.000295616770788817,a:"Data Format Functions Click one of the following functions for more information: "},"893":{y:0,u:"../Content/FuncRef/js_web/categories/lrFr_JS_Filter_Funcs.htm",l:-1,t:"Filter Functions",i:0.00101037037173436,a:"Filter Functions Click one of the following functions for more information: "},"894":{y:0,u:"../Content/FuncRef/js_web/categories/lrFr_JS_Header_Funcs.htm",l:-1,t:"Header Functions",i:0.00141055193154175,a:"Header Functions Click one of the following functions for more information: "},"895":{y:0,u:"../Content/FuncRef/js_web/categories/lrFr_JS_Proxy_Server_Funcs.htm",l:-1,t:"Proxy Server Functions",i:0.00104157472388926,a:"Proxy Server Functions Click one of the following functions for more information: "},"896":{y:0,u:"../Content/FuncRef/js_web/categories/lrFr_JS_Replay_Funcs.htm",l:-1,t:"Replay Functions",i:0.00101905514657491,a:"Replay Functions Click one of the following functions for more information: "},"897":{y:0,u:"../Content/FuncRef/js_web/categories/lrFr_JS_Service_Funcs.htm",l:-1,t:"Service Functions",i:0.00219271391016284,a:"Service functions perform a task, manipulate, or analyze the data that was received from the server. Many of the tasks done by the service functions can be set by using the Runtime settings. Advanced users can use the service functions to change settings from inside a script.  Service functions are ..."},"898":{y:0,u:"../Content/FuncRef/js_vuser/etc/lrFr_JS_Alphabetical_Listing.htm",l:-1,t:"Alphabetical Listing - JavaScript",i:0.000397708178363028,a:"Alphabetical Listing - JavaScript Click one of the following functions for more information:"},"899":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_abort.htm",l:-1,t:"lr.abort",i:0.000662774231671062,a:"Aborts the execution of a script.  Syntax lr.abort( ); The lr.abort function aborts the execution of a script . It stops the execution of the actions section, executes the vuser_end section, and ends the execution. This function is useful when you need to manually abort a run as a result of a ..."},"900":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_advanceParam.htm",l:-1,t:"lr.advanceParam",i:0.000442115933541497,a:"Advances to the next available parameter value.  Syntax lr.advanceParam( param ); Arguments The lr.advanceParam function causes the script to use the next available value of the parameter. If you are running multiple iterations, you can specify in the parameter properties to advance automatically to ..."},"901":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_continueOnError.htm",l:-1,t:"lr.continueOnError",i:0.000483936693418987,a:"Specifies an error handling method. Syntax lr.continueOnError( option ); Arguments The lr.continueOnError function specifies how to handle errors. You can choose to continue running if an error occurs, or to abort the run execution.  Normally, you specify how the test run component handles errors ..."},"902":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_debugMessage.htm",l:-1,t:"lr.debugMessage",i:0.000408897503633445,a:"Sends a debug message to the log file. Syntax lr.debugMessage( message_level, message );  Arguments The lr.debugMessage function sends a debug message when the specified message level is active. If the specified message level is not active, a message is not issued. You can set the active message ..."},"903":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_decrypt.htm",l:-1,t:"lr.decrypt",i:0.000402348895729831,a:"Use  lr.unmask .  Unmasks an encoded string during replay. Syntax lr.decrypt( EncodedString ); Arguments The lr.decrypt function is generated during recording to encode passwords. VuGen records the actual password but displays an encoded version of the password within the lr.decrypt function. You ..."},"904":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_endTimer.htm",l:-1,t:"lr.endTimer",i:0.00124151240819683,a:"Stops a timer. Syntax lr.endTimer( timer );  Arguments lr.endTimer stops a timer that began timing when  lr.startTimer  was called. Return Values The elapsed time in seconds. Parameterization You cannot use standard parameterization for any arguments in this function. Example \nfunction Action(){\n\n   ..."},"905":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_endTransaction.htm",l:-1,t:"lr.endTransaction",i:0.000741560869028254,a:"Marks the end of a transaction. Syntax lr.endTransaction( transactionName, status ) ; Arguments The lr.endTransaction function marks the end of a transaction and records the amount of time it took to perform the transaction. To indicate a transaction to be analyzed, place the  lr.startTransaction  ..."},"906":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_errorMessage.htm",l:-1,t:"lr.errorMessage",i:0.000573811557415667,a:"Sends an error message with location details to the output windows, log files, and other test report summaries. Syntax lr.errorMessage( message ); Arguments The lr.errorMessage function sends an error message to the application\u0027s output windows, log files, and other test report summaries.  The ..."},"907":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_evalString.htm",l:-1,t:"lr.evalString",i:0.00133542648317258,a:"Returns the string argument after evaluating embedded parameters.  Syntax lr.evalString( instring ); Arguments The lr.evalString function returns the input string after evaluating any embedded parameters. If the string argument contains only a parameter, the function returns the current value of the ..."},"908":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_exit.htm",l:-1,t:"lr.exit",i:0.000570079725163426,a:"Exits from the script, action, or iteration. Syntax lr.exit( continuationOption, exitStatus ); Arguments The lr.exit function allows you to exit from the script run during execution. A transaction in which lr.exit is called does not appear in Controller in the Transaction Status box. It is ignored ..."},"909":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_failTransWithError.htm",l:-1,t:"lr.failTransWithError",i:0.000437787523787472,a:"Sets the default status of open transactions to LR_FAIL and sends an error message. Syntax lr.failTransWithError( errorMessage );  Arguments The lr.failTransWithError function sets the default exit status to LR_FAIL for all open transactions with LR_AUTO in their  lr.endTransaction  statement and ..."},"910":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_getAttribString.htm",l:-1,t:"lr.getAttribString",i:0.000524992201840681,a:"Returns a string type value of an argument passed to the script run. Syntax lr.getAttribString( argumentName ); Arguments The lr.getAttribString function returns the value of an argument that was passed to the run of the script.   For example, lr.getAttribString(\"ipv6\") returns the IPv6 address of ..."},"911":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_getDebugMessage.htm",l:-1,t:"lr.getDebugMessage",i:0.000446550679335406,a:"Returns the current message logging settings. Syntax lr.getDebugMessage( );  The lr.getDebugMessage function returns the current log runtime settings. These settings determine what information is output. The log settings are specified with the runtime settings dialog, or by using the  ..."},"912":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_getHostName.htm",l:-1,t:"lr.getHostName",i:0.000720594261683781,a:"Returns the name of the host.  Syntax lr.getHostName( );  The lr.getHostName function returns the name of the machine executing the script. Return Values On success, returns the name of the host. On failure, returns NULL. Parameterization You cannot use standard parameterization for any arguments in ..."},"913":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_getTransactionDuration.htm",l:-1,t:"lr.getTransactionDuration",i:0.000409949041830908,a:"Returns the duration of a transaction.  Syntax lr.getTransactionDuration( transaction ); Arguments The lr.getTransactionDuration function returns the duration in seconds of the specified transaction to this point. You use this function to determine the total transaction time before the transaction ..."},"914":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_getTransactionStatus.htm",l:-1,t:"lr.getTransactionStatus",i:0.000223698713990862,a:"Returns the current status of a transaction.  Syntax lr.getTransactionStatus( transactionName ) ; Arguments lr.getTransactionStatus returns the current status of a transaction. lr.getTransactionStatus cannot be invoked after  lr.endTransaction . Since lr.getTransactionStatus can only return the ..."},"915":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_getTransactionThinkTime.htm",l:-1,t:"lr.getTransactionThinkTime",i:0.000389044114354931,a:"Returns the think time of a transaction.  Syntax lr.getTransactionThinkTime( transaction ); Arguments The lr.getTransactionThinkTime function returns the think time of the specified transaction until this point. It returns values greater than zero only for open transactions.  To determine other ..."},"916":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_getTransactionWastedTime.htm",l:-1,t:"lr.getTransactionWastedTime",i:0.000295049030955776,a:"Returns the wasted time of a transaction by its name.  Syntax lr.getTransactionWastedTime( transaction ); Arguments The lr.getTransactionWastedTime function returns the  Wasted Time  in seconds of the specified transaction to this point.  The lr.getTransactionWastedTime function returns values ..."},"917":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_getVuserIp.htm",l:-1,t:"lr.getVuserIp",i:0.00057816044153969,a:"Returns the IP address of a Vuser. Syntax lr.getVuserIp( );  The lr.getVuserIp function returns the IPv4 address of a Vuser. When performing IP spoofing, each Vuser can use a different address. This function allows you to determine the current Vuser\u0027s IP address. If the IP was set with the ..."},"918":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_loadLibrary.htm",l:-1,t:"lr.loadLibrary",i:0.000662774231671062,a:"Evaluates and runs the specified JavaScript file in the global context. Syntax lr.loadLibrary( \"\u003cpath\u003e\" ); Arguments The lr.loadLibrary function evaluates and runs the specified js file in the global context. Enter the function manually before the beginning of the action scope. Return Values Not ..."},"919":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_logMessage.htm",l:-1,t:"lr.logMessage",i:0.000771549105288362,a:"Sends a message to the log.  Syntax lr.logMessage( message ); Arguments The lr.logMessage function sends a message to the Vuser or agent log file (depending on the application), and not to the output window. You can use this function for debugging by sending error or other informational messages to ..."},"920":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_message.htm",l:-1,t:"lr.message",i:0.000640384071407953,a:"Sends a message to the log and output window.  Syntax lr.message( message ); Arguments The lr.message function sends a message to the log file and output window. When run in VuGen, the output file is output.txt.  Use  lr.logMessage  instead of this function to send the message only to the log file. ..."},"921":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_outputMessage.htm",l:-1,t:"lr.outputMessage",i:0.000771549105288362,a:"Sends a message to log files, output windows, and other test report summaries.  Syntax lr.outputMessage( message ); Arguments The lr.outputMessage function sends a message with the script section and line number to output windows log files, and other test report summaries.  For details regarding the ..."},"922":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_paramIncrement.htm",l:-1,t:"lr.paramIncrement",i:0.000973692539532137,a:"Increments the value of a numerical parameter. Syntax lr.paramIncrement( destinationParam, sourceParam );  Arguments The lr.paramIncrement function retrieves the value of sourceParam, increments its value by one, and stores the incremented value as a null terminated string in destinationParam.  ..."},"923":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_paramUnique.htm",l:-1,t:"lr.paramUnique",i:0.000551042869413574,a:"Generates a unique string and assigns it to a parameter. Syntax lr.paramUnique( paramName ); Arguments lr.paramUnique generates a string of format: \u003cgroup name\u003e\u003cuser ID\u003e\u003ccurrent time\u003e. The string contains no spaces. Return Values Not applicable Parameterization You cannot use standard ..."},"924":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_paramarrIdx.htm",l:-1,t:"lr.paramarrIdx",i:0.000551042869413574,a:"Returns the value of the parameter at a specified location in a parameter array. Syntax lr.paramarrIdx( paramArrayName, index ) ; Arguments lr.paramarrIdx returns a string containing the value of the parameter at the specified position in a parameter array. If the parameter does not exist, the ..."},"925":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_paramarrLen.htm",l:-1,t:"lr.paramarrLen",i:0.000551042869413574,a:"Returns the number of elements in a parameter array. Syntax lr.paramarrLen( paramArrayName );  Arguments lr.paramarrLen returns the number of elements in a parameter array. Return Values The length of the array. On error, returns -1. Parameterization Standard parameterization is not available for ..."},"926":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_paramarrRandom.htm",l:-1,t:"lr.paramarrRandom",i:0.000551042869413574,a:"Returns the value of the parameter at a random location in a parameter array Syntax lr.paramarrRandom( paramArrayName ); Arguments lr.paramarrRandom returns a string containing the value of the parameter in a parameter array. The value is returned from the parameter at a position chosen randomly.  ..."},"927":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_read_file.htm",l:-1,t:"lr.readFile",i:0.000551042869413574,a:"Reads a file into a parameter. Java Language lr.readFile( filename, output parameter name, continue on error ); Arguments lr.readFile reads a file and saves the file contents in a parameter.\n         Return Values This function returns the number of bytes read. On failure, returns a negative number. ..."},"928":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_removeCustomErrorMessage.htm",l:-1,t:"lr.removeCustomErrorMessage",i:0.000393651093267466,a:"Removes a custom text that was set by lr.setCustomErrorMessage. Syntax lr.removeCustomErrorMessage( );  The lr.removeCustomErrorMessage function removes a text that was set by  lr.setCustomErrorMessage . Return Values Not applicable Parameterization You cannot use standard parameterization for any ..."},"929":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_rendezvous.htm",l:-1,t:"lr.rendezvous",i:0.000662774231671062,a:"Creates a rendezvous point in the Vuser script.  Syntax lr.rendezvous( rendezvousName ); Arguments The lr.rendezvous function creates a rendezvous point in a Vuser script. When this statement is executed, the Vuser program stops and waits for permission to continue.  This function can only be used ..."},"930":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_require.htm",l:-1,t:"lr.require",i:0.000662774231671062,a:"Loads the specified JavaScript module. Syntax lr.require( \"\u003cpath\u003e\" ); The lr.require function loads the specified JavaScript module. Enter the function manually before the beginning of the action scope. Return Values \n        An object containing the members exported from the library.\n         ..."},"931":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_resumeTransaction.htm",l:-1,t:"lr.resumeTransaction",i:0.000271537298821599,a:"Resumes reporting transaction data within a script. Syntax lr.resumeTransaction( transactionName ); This function is retained for backward compatibility. For more general ways of reporting partial transaction durations, see  lr.setTransaction . The lr.resumeTransaction function resumes the reporting ..."},"932":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_saveInt.htm",l:-1,t:"lr.saveInt",i:0.000551042869413574,a:"Saves an integer to a parameter. Syntax lr.saveInt( value, paramName ); Arguments The lr.saveInt function converts an integer to a string and saves the string in a parameter. If the parameter does not exist, it is created. Return Values Not applicable Parameterization You cannot use standard ..."},"933":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_saveParamRegexp.htm",l:-1,t:"lr.saveParamRegexp",i:0.000507626003331486,a:"Finds a match or matches to a regular expression in a buffer, and saves the capture group to a parameter. Syntax lr.saveParamRegexp ( {object} ); JavaScript Object \n{\n   bufferToSearch: \"\u003cstring\u003e\",\n   bufferSize: \u003cnumber\u003e,\n   regExp: \"\u003csearch_string\u003e\"|{value: \"\u003csearch_string\u003e\", flag: \"IC\" }, \n   ..."},"934":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_saveString.htm",l:-1,t:"lr.saveString",i:0.000561417046976493,a:"Saves a null-terminated string to a parameter. Syntax lr.saveString( paramValue, paramName ); Arguments The lr.saveString function assigns the specified null-terminated string to a parameter. This function is useful in correlating queries. To determine the value of the parameter, use the  ..."},"935":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_setCustomErrorMessage.htm",l:-1,t:"lr.setCustomErrorMessage",i:0.000505186764846352,a:"lr.setCustomErrorMessage Sets a custom text to be output after built-in error messages. Syntax lr.setCustomErrorMessage( message ); "},"936":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_setDebugMessage.htm",l:-1,t:"lr.setDebugMessage",i:0.000836421492956776,a:"Changes the message level for the script execution. Syntax lr.setDebugMessage( messageLevelFlag, on_off ); Arguments The lr.setDebugMessage function changes the debug message level bitmap. By setting or clearing flags in the bitmap, you determine which information is sent by calls to  lr.message ,  ..."},"937":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_setTransaction.htm",l:-1,t:"lr.setTransaction",i:0.000444139502320931,a:"Creates a completed transaction. Syntax lr.setTransaction( name, duration, status ); Arguments The lr.setTransaction function creates a transaction, its duration, and status in a single call. Use it where the business process you want to capture in a transaction does not consist of sequential steps, ..."},"938":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_setTransactionStatus.htm",l:-1,t:"lr.setTransactionStatus",i:0.00031374639500335,a:"Sets the default end status of open transactions. Syntax lr.setTransactionStatus ( status ); Arguments The lr.setTransactionStatus function sets the status of those transactions currently open which have LR_AUTO in their  lr.endTransaction  statement. A transaction\u0027s status is defined in the status ..."},"939":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_startTimer.htm",l:-1,t:"lr.startTimer",i:0.00123578280867296,a:"Starts a timer. Syntax lr.startTimer (); lr.startTimer starts a timer that calculates the passage of time in seconds. lr.startTimer returns a handle to the timer. Pass the handle to  lr.endTimer  to stop the timer.  Return Values Returns merc_timer_handle_t, a handle to a timer. Parameterization ..."},"940":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_startTransaction.htm",l:-1,t:"lr.startTransaction",i:0.000361584979834087,a:"Marks the beginning of a transaction. Syntax lr.startTransaction( transactionName  ); Arguments The lr.startTransaction function marks the beginning of a transaction. To indicate a transaction to be analyzed, use the lr.startTransaction and  lr.endTransaction  functions. These functions are inserted ..."},"941":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_stopTransaction.htm",l:-1,t:"lr.stopTransaction",i:0.000281400906615062,a:"Freezes reporting of transaction data. Syntax lr.stopTransaction( transactionName ); Arguments This function is retained for backward compatibility. For more general ways of reporting partial transaction durations, see  lr.setTransaction . After a call to lr.stopTransaction, statistics returned by ..."},"942":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_thinkTime.htm",l:-1,t:"lr.thinkTime",i:0.000840069308600708,a:"Pauses execution between commands in a script. Syntax lr.thinkTime( thinkTime ); Arguments lr.thinkTime allows you to pause test execution during a run. This is especially useful in simulating think time, the time a real user pauses to think between actions.  When using cross-step downloads or ..."},"943":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_unzip.htm",l:-1,t:"lr.unzip",i:0.000551042869413574,a:"Uncompresses the information in a parameter and stores the uncompressed information in another parameter. Syntax lr.unzip ( \"source=\u003cparameter name\u003e\",\"target=\u003cparameter name\u003e\" ); Arguments lr.unzip uncompresses the information in a parameter and stores the uncompressed information in another ..."},"944":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_userDataPoint.htm",l:-1,t:"lr.userDataPoint",i:0.000720594261683781,a:"Records a user-defined data sample. Syntax lr.userDataPoint( sampleName, value ); Arguments The lr.userDataPoint function allows you to record your own data for analysis. Each time you want to record a point, use this function to record the sample name and the value. The time of the sample is ..."},"945":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_vuserStatusMessage.htm",l:-1,t:"lr.vuserStatusMessage",i:0.000435678697676925,a:"Sends a message to the Vuser status area. Syntax lr.vuserStatusMessage( message ); Arguments The lr.vuserStatusMessage function sends a string to the Status area of the Controller. It also sends the string to the Vuser log. When run from VuGen, the message is sent to output.txt. Return Values On ..."},"946":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_whoami.htm",l:-1,t:"lr.whoami",i:0.000720594261683781,a:"Returns information about the Vuser executing the script. Syntax lr.whoami ( vuserID ); Arguments The lr.whoami function gets information about the Vuser.  To access the scenario ID, add the scenario attribute to the runtime settings. Add scenario to the Additional Attributes on the General tab. If ..."},"947":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_wastedTime.htm",l:-1,t:"lr.wastedTime",i:0.000411697988036607,a:"Sets the wasted time for all open transactions. Syntax lr.wastedTime( wasteTime );  Arguments lr.wastedTime allows you to subtract the time wasted on incidental or secondary actions from all open transactions. For more information, see  Wasted Time . Return Values Not applicable Parameterization You ..."},"948":{y:0,u:"../Content/FuncRef/js_vuser/xml/lrFr_JS_lr_xmlDelete.htm",l:-1,t:"lr.xmlDelete",i:0.000223939320855014,a:"lr.xmlDelete Deletes fragments from an XML string. Syntax lr.xmlDelete( {object} ); JavaScript Object \n{\n    xml:\"\u003cstring\u003e\",\n    resultParam:\"\u003cstring\u003e\",\n    query:\"\u003cstring\u003e\",\n    selectAll:\"\u003cstring\u003e\",\n    notFound:\"\u003cstring\u003e\"\n} "},"949":{y:0,u:"../Content/FuncRef/js_vuser/xml/lrFr_JS_lr_xmlExtract.htm",l:-1,t:"lr.xmlExtract",i:0.000376540090864873,a:"Extracts XML fragments from an XML string. Syntax lr.xmlExtract( {object} ); JavaScript Object \n{\n   xml:\"\u003cstring\u003e\",\n   xmlFragmentParam:\"\u003cstring\u003e\",\n   query:\"\u003cstring\u003e\", | fastQuery:\"\u003cstring\u003e\",\n   selectAll:\"\u003cstring\u003e\",\n   resolveNameSpaces:\"\u003cstring\u003e\",\n   notFound:\"\u003cstring\u003e\",\n   ..."},"950":{y:0,u:"../Content/FuncRef/js_vuser/xml/lrFr_JS_lr_xmlFind.htm",l:-1,t:"lr.xmlFind",i:0.000288790512670435,a:"Verifies that XML values are returned by a query. Syntax lr.xmlFind( {object} ); JavaScript Object \n{\n   xml:\"\u003cstring\u003e\",\n   query:\"\u003cstring\u003e\", | fastQuery:\"\u003cstring\u003e\",\n   value:\"\u003cstring\u003e\", | valueParam:\"\u003cstring\u003e\",\n   selectAll:\"\u003cstring\u003e\",\n   ignoreCase:\"\u003cstring\u003e\",\n   useRegExp:\"\u003cstring\u003e\",\n   ..."},"951":{y:0,u:"../Content/FuncRef/js_vuser/xml/lrFr_JS_lr_xmlGetValues.htm",l:-1,t:"lr.xmlGetValues",i:0.00102051202940611,a:"lr.xmlGetValues Retrieves values of XML elements found by a query. Syntax lr.xmlGetValues( {object} ); JavaScript Object \n{\n   xml:\"\u003cstring\u003e\",\n   valueParam:\"\u003cstring\u003e\",\n   query:\"\u003cstring\u003e\", | fastQuery:\"\u003cstring\u003e\",\n   selectAll:\"\u003cstring\u003e\",\n   notFound:\"\u003cstring\u003e\"\n} "},"952":{y:0,u:"../Content/FuncRef/js_vuser/xml/lrFr_JS_lr_xmlInsert.htm",l:-1,t:"lr.xmlInsert",i:0.000304678870098116,a:"Inserts a new XML fragment into an XML string. Syntax lr.xmlInsert( {object} ); JavaScript Object \n   xml:\"\u003cstring\u003e\",\n   resultParam:\"\u003cstring\u003e\",\n   query:\"\u003cstring\u003e\",\n   xmlFragment:\"\u003cstring\u003e\", | xmlFragmentParam:\"\u003cstring\u003e\",\n   selectAll:\"\u003cstring\u003e\",\n   position:\"\u003cstring\u003e\",\n   notFound:\"\u003cstring\u003e\"\n} "},"953":{y:0,u:"../Content/FuncRef/js_vuser/xml/lrFr_JS_lr_xmlReplace.htm",l:-1,t:"lr.xmlReplace",i:0.000297660432542953,a:"lr.xmlReplace Replaces fragments of an XML string. Syntax lr.xmlReplace( {object} ); JavaScript Object \n{\n   xml:\"\u003cstring\u003e\",\n   resultParam:\"\u003cstring\u003e\",\n   query:\"\u003cstring\u003e\",\n   xmlFragment:\"\u003cstring\u003e\", | xmlFragmentParam:\"\u003cstring\u003e\", \n   selectAll:\"\u003cstring\u003e\",\n   notFound:\"\u003cstring\u003e\"\n} "},"954":{y:0,u:"../Content/FuncRef/js_vuser/xml/lrFr_JS_lr_xmlSetValues.htm",l:-1,t:"lr.xmlSetValues",i:0.000572550624319823,a:"lr.xmlSetValues Sets the values of XML elements found by a query. Syntax lr.xmlSetValues( {object} ); JavaScript Object \n{\n   xml:\"\u003cstring\u003e\",\n   resultParam:\"\u003cstring\u003e\",\n   query:\"\u003cstring\u003e\",\n   value:\"\u003cstring\u003e\", | valueParam:\"\u003cstring\u003e\",\n   selectAll:\"\u003cstring\u003e\",\n   notFound:\"\u003cstring\u003e\"\n} "},"955":{y:0,u:"../Content/FuncRef/js_vuser/xml/lrFr_JS_lr_xmlTransform.htm",l:-1,t:"lr.xmlTransform",i:0.000244082247188455,a:"lr.xmlTransform Applies Extensible Stylesheet Language (XSL) Transformation to XML data. Syntax lr.xmlTransform( {object} ); JavaScript Object \n{\n    xml:\"\u003cstring\u003e\",\n    stylesheet:\"\u003cstring\u003e\",\n    resultParam:\"\u003cstring\u003e\"\n} "},"956":{y:0,u:"../Content/FuncRef/js_vuser/lrFr_JS_lr_zip.htm",l:-1,t:"lr.zip",i:0.000551042869413574,a:"Compresses the information in a parameter and stores the compressed information in another parameter. Syntax lr.zip ( \"source=\u003cparameter name\u003e\", \"target=\u003cparameter name\u003e\" ); Arguments lr.zip compresses the information in a parameter and stores the compressed information in another parameter.  Return ..."},"957":{y:0,u:"../Content/FuncRef/js_web/categories/lrFr_JS_Web_Alpha_List.htm",l:-1,t:"Web Vuser Functions: JavaScript Language",i:0.000421563901518225,a:"Web Vuser Functions: JavaScript Language Click one of the following functions for more information."},"958":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_addAutoFilter.htm",l:-1,t:"web.addAutoFilter",i:0.000980237720547272,a:"Sets criteria to include or exclude urls when downloading (applies to all subsequent action functions) Syntax web.addAutoFilter( {object} ); JavaScript Object \n{  \n   action:\"\u003cstring\u003e\",\n   url:\"\u003cstring\u003e\",\n   urlPrefix:\"\u003cstring\u003e\",\n   host:\"\u003cstring\u003e\",\n   hostPrefix:\"\u003cstring\u003e\",\n   ..."},"959":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_addAutoHeader.htm",l:-1,t:"web.addAutoHeader",i:0.00141461064320753,a:"web.addAutoHeader Adds the specified header to all subsequent HTTP requests."},"960":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_addCookie.htm",l:-1,t:"web.addCookie",i:0.000794145055375638,a:"web.addCookie Adds, deletes, or replaces a cookie."},"961":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_addCookieEx.htm",l:-1,t:"web.addCookieEx",i:0.00138087606635511,a:"web.addCookieEx Adds a cookie or cookies with the specified add behavior."},"962":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_addFilter.htm",l:-1,t:"web.addFilter",i:0.000738785050478373,a:"web.addFilter"},"963":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_addHeader.htm",l:-1,t:"web.addHeader",i:0.00105217651803509,a:"web.addHeader Adds the specified header to the next HTTP request. Syntax web.addHeader( header, content );"},"964":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_cacheCleanup.htm",l:-1,t:"web.cacheCleanup",i:0.000534732562576199,a:"web.cacheCleanup Clears the contents of the cache simulator."},"965":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_cleanupAutoHeaders.htm",l:-1,t:"web.cleanupAutoHeaders",i:0.000620603587147195,a:"web.cleanupAutoHeaders Stops scripts from adding user–defined headers to subsequent HTTP requests."},"966":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_cleanupCookies.htm",l:-1,t:"web.cleanupCookies",i:0.000989722059035461,a:"Removes all cookies currently stored by the Vuser. Syntax web.cleanupCookies( );  Return Values Not applicable  Parameterization Parameterization is not applicable to this function. General Information The web.cleanupCookies function removes all the cookies that are currently stored for use by the ..."},"967":{y:0,u:"../Content/FuncRef/js_web/lrFr_JS_web_concurrentEnd.htm",l:-1,t:"web.concurrentEnd",i:0.000747721923189788,a:"web.concurrentEnd Marks the end of a concurrent group. Syntax web.concurrentEnd ( \"0\" );"},});