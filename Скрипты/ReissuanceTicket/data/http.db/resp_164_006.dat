define({"453":{y:0,u:"../Content/FuncRef/VTS/multi_connect/lrFr_vtc_update_message_ifequals.htm",l:-1,t:"vtc_update_message_ifequals",i:0.000171340844707446,a:"Deprecated. Use  lrvtc_update_message_ifequals . Replaces the data in a field if the current data equals a given value. C Language VTCERR2 vtc_update_message_ifequals ( PVCI2 pvci,  char *columnName, int rowIndex, char *newValue, char *ifEqualValue, unsigned short *outRc ); C# Language bool ..."},"454":{y:0,u:"../Content/FuncRef/VTS/multi_connect/lrFr_vtc_update_row1.htm",l:-1,t:"vtc_update_row1",i:0.000171340844707446,a:"Deprecated. Use  lrvtc_update_row1 . Sets the values of specified fields in a row. C Language VTCERR2 vtc_update_row1 ( PVCI2 pvci,  char *columnNames,  int rowIndex ,  char *values, char *delimiter, unsigned short *outRc ); C# Language bool vts_multi.update_row ( int pvci,  string columnNames,  int ..."},"455":{y:0,u:"../Content/FuncRef/VTS/multi_connect/etc/lrFr_vtc_Global.htm",l:-1,t:"Global Functions",i:0.000828678177597374,a:"The functions for multiple connections have been deprecated, and support for multiple connections will be fully removed in a future version. It is therefore recommended to work with the single connection functions only. Functions with a vts_multi.* format can be used in C# scripts. Functions with a ..."},"456":{y:0,u:"../Content/FuncRef/VTS/multi_connect/etc/lrFr_vtc_Insert.htm",l:-1,t:"Data Insert Functions",i:0.000154672204611218,a:"The functions for multiple connections have been deprecated, and support for multiple connections will be fully removed in a future version. It is therefore recommended to work with the single connection functions only. Functions with a vts_multi.* format can be used in C# scripts. Functions with a ..."},"457":{y:0,u:"../Content/FuncRef/VTS/multi_connect/etc/lrFr_vtc_Queries.htm",l:-1,t:"Query Functions",i:0.000288902726621663,a:"The functions for multiple connections have been deprecated, and support for multiple connections will be fully removed in a future version. It is therefore recommended to work with the single connection functions only. Functions with a vts_multi.* format can be used in C# scripts. Functions with a ..."},"458":{y:0,u:"../Content/FuncRef/VTS/multi_connect/etc/lrFr_vtc_Update.htm",l:-1,t:"Data Update Functions",i:0.000589948963901586,a:"The functions for multiple connections have been deprecated, and support for multiple connections will be fully removed in a future version. It is therefore recommended to work with the single connection functions only. These functions change the data in fields.    vtc_retrieve_messages1 and ..."},"459":{y:0,u:"../Content/FuncRef/VTS/multi_connect/etc/lrFr_vtc_Multi_Connection.htm",l:-1,t:"Virtual Table Server (VTS) Single Connection and Multiple Connection Functions",i:0.000177170386417883,a:"The functions for multiple connections have been deprecated, and support for multiple connections will be fully removed in a future version. It is therefore recommended to work with the single connection functions only. Use single connection functions if the script connects to only one Virtual Table ..."},"460":{y:0,u:"../Content/FuncRef/VTS/etc/lrFr_VTCERR.htm",l:-1,t:"Error Codes",i:0.00220877361824621,a:"Error Codes    "},"461":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_AJAX_ClickScrpt_Funcs.htm",l:-1,t:"AJAX Click and Script Functions",i:0.000132341366777373,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"462":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_Alphbtcl_List_Funcs.htm",l:-1,t:"Alphabetical Listing",i:0.000905194403006987,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"463":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_ajax_accordion.htm",l:-1,t:"ajax_accordion",i:0.000259780127595771,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"464":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_ajax_autocmp.htm",l:-1,t:"ajax_autocomplete",i:0.000259780127595771,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"465":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_ajax_clpsblpl.htm",l:-1,t:"ajax_collapsiblepanel",i:0.000259780127595771,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"466":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_ajax_rating.htm",l:-1,t:"ajax_rating",i:0.000259780127595771,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"467":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_ajax_rerdrlst.htm",l:-1,t:"ajax_reorderlist",i:0.000259780127595771,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"468":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_ajax_slider.htm",l:-1,t:"ajax_slider",i:0.000259780127595771,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"469":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajax_tabs.htm",l:-1,t:"ajax_tabs",i:0.000259780127595771,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"470":{y:0,u:"../Content/FuncRef/ajax/lrFuncRef_ajx_Syntax_Guidelines.htm",l:-1,t:"Syntax Guidelines",i:0.000132341366777373,a:"This protocol is supported for replay only. Support for this protocol will be discontinued in future versions.. We recommend that you migrate your Ajax Click \u0026 Script scripts to another web protocol such as TruClient-Web or Web-HTTP/HTML. For details, see  Web Vuser Functions (WEB)  and the  ..."},"471":{y:0,u:"../Content/FuncRef/amf/lrFuncRef_amfc_AMF_Vuser_Funcs.htm",l:-1,t:"Action Message Format Vuser Functions (AMF)",i:0.000429808468632429,a:"Action Message Format Vuser Functions (AMF) AMF Vusers emulate Flash Remoting using the AMF format. Click one of the following functions for more information:"},"472":{y:0,u:"../Content/FuncRef/amf/lrFuncRef_amf_amf_def_ehs.htm",l:-1,t:"amf_define_envelope_header_set",i:0.00028560776813432,a:"Defines a set of envelope headers. int amf_define_envelope_header_set( \"ID=\u003cheader set name\u003e\", HEADER, \"\u003cXML string describing the header\u003e\", [HEADER, \"\u003cheader 2\u003e\",..., HEADER, \"\u003cheader n\u003e\",] LAST );  The amf_define_envelope_header_set function defines a set containing one or more envelope headers. ..."},"473":{y:0,u:"../Content/FuncRef/amf/lrFuncRef_amf_amf_def_hs.htm",l:-1,t:"amf_define_header_set",i:0.000284156753048866,a:"Defines a set of AMF headers. int amf_define_header_set( \"ID=\u003cAMF header set name\u003e\", HEADER, \"Name=\u003cheader name\u003e\", \"MustUnderstand=\u003cboolean value\u003e\", \"Data=\u003cXML string describing the header data\u003e\", [ HEADER, \u003cheader section 2\u003e, ... HEADER, \u003cheader section n\u003e,] LAST ); The ..."},"474":{y:0,u:"../Content/FuncRef/amf/lrFuncRef_amf_amf_call.htm",l:-1,t:"amf_call",i:0.000426914622364444,a:"Sends an AMF request. int amf_call( \u003cStepName\u003e, \u003cList of Attributes\u003e, MESSAGE, \"Method=\u003cmethod name\u003e\", \"TargetObjectId=\u003ctarget name\u003e\", [\"EnvelopeHeaderSetId=\u003cheader set name\u003e\",] BEGIN_ARGUMENTS, \u003cArgument List\u003e, END_ARGUMENTS, [,MESSAGE, \u003cmessage section 2\u003e, ... MESSAGE, \u003cmessage section n\u003e,] LAST ..."},"475":{y:0,u:"../Content/FuncRef/amf/lrFuncRef_amf_amf_set_ver.htm",l:-1,t:"amf_set_version",i:0.000225127583184859,a:"amf_set_version Sets the AMF version number. int amf_set_version( \"\u003cAMF version number\u003e\") ; The amf_set_version function overrides the version number specified in the run time settings. This function should be used only if a problem indicates it is necessary."},"476":{y:0,u:"../Content/FuncRef/amf/lrFuncRef_amf_AMF_Arguments.htm",l:-1,t:"AMF Arguments",i:0.000253205435965855,a:"The AMF protocol function arguments are the arguments of the invoked method. Each argument is defined as an XML string, with no preceding keyword. For example: \u003cstrictArray length=\\\"8\\\"\u003e\u003cboolean\u003etrue\u003c/boolean \u003e....\u003c/strictArray\u003e It is recommended that you edit the arguments in the VuGen tree view, ..."},"477":{y:0,u:"../Content/FuncRef/amf/lrFuncRef_amf_Using_AMF_Example.htm",l:-1,t:"Example: Using AMF functions.",i:0.000273648221007496,a:"The following code section shows a typical AMF VUser sequence. Headers are defined and then used in the call. amf_define_header_set(\"Id=amf_header_set\",\n  HEADER,\n  \"Name=Credentials\",\n  \"MustUnderstand=false\",\n  \"Data=\u003cobject\u003e\u003cstring name=\\\"password\\\"\u003eqa\u003c/  string\u003e\"\n  \"\u003cstring ..."},"478":{y:0,u:"../Content/FuncRef/citrix_ica/etc/lrFuncRef_cit_Citrix_Vuser_Funcs.htm",l:-1,t:"Citrix ICA Vuser Functions (CTRX)",i:0.000132341366777373,a:"Citrix products deliver applications across networks. Applications reside on the Citrix server; access to those applications is delivered to remote machines (the Citrix clients) via Citrix\u0027s ICA protocol. ICA supports a full GUI interface of the server application on the client side.  VuGen records ..."},"479":{y:0,u:"../Content/FuncRef/citrix_ica/etc/lrFr_ctrx_Alphabetical_List_Funcs.htm",l:-1,t:"Alphabetical Listing of Citrix Functions",i:0.000144840356669964,a:"Alphabetical Listing of Citrix Functions Click one of the following functions for more information:"},"480":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr-ctrx-activate-window.htm",l:-1,t:"ctrx_activate_window",i:0.000367608269219129,a:"Activates a window. int ctrx_activate_window(char *window_name, [CONTINUE_ON_ERROR,] CTRX_LAST); ctrx_activate_window is a function that makes a window active by settings an input focus to it. The window_name argument indicates the name of the window that ctrx_activate_window tries to set in focus, ..."},"481":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_connect_server.htm",l:-1,t:"ctrx_connect_server",i:0.000396042941219233,a:"Logs in to a Citrix server. int ctrx_connect_server( char *server_name, char *user_name, char *password, char *domain, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_connect_server connects a Citrix client to a Citrix server. Return Values Citrix ICA Return Values Parameterization Parameterization is ..."},"482":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_disconnect_server.htm",l:-1,t:"ctrx_disconnect_server",i:0.000394018261815045,a:"Disconnects a Citrix client from a Citrix server. int ctrx_disconnect_server( char *server_name, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_disconnect_server disconnects a client from a Citrix server.  The ICA server should also be configured to disconnect from the client on a broken or timed-out ..."},"483":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_execute_on_window.htm",l:-1,t:"ctrx_execute_on_window",i:0.000999824791911669,a:"Specifies handler function on window appearance. void ctrx_execute_on_window( char *window_name, long handler ); ctrx_execute_on_window specifies the function to call when a window appears. When a window with name window_name appears, the handler function is invoked. ctrx_execute_on_window is ..."},"484":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_get_bitmap_value.htm",l:-1,t:"ctrx_get_bitmap_value",i:0.000360685805959284,a:"Returns the value of a bitmap as a string. int ctrx_get_bitmap_value( long x_start, long y_start, long width, long height, char *buffer, [filename,] [CONTINUE_ON_ERROR,] CTRX_LAST ); Use ctrx_get_bitmap_value to retrieve the hashed string value of a bitmap for use in your custom synchronization ..."},"485":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr_ctrx_get_server_name.htm",l:-1,t:"ctrx_get_server_name",i:0.000312977503776258,a:"Retrieves the name of the active server to which the client is connected. int ctrx_get_server_name( LPSTR serverName, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_get_server_name retrieves the name of the server to which the client is connected. The script must allocate memory space for the output buffer, ..."},"486":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_get_text.htm",l:-1,t:"ctrx_get_text",i:0.000553431793618947,a:"Retrieves the text in a rectangle. int ctrx_get_text( char *window_name, long xpos, long ypos, long width, long height, char *filename, char *text_buffer, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_get_text assigns the text in a rectangle into text_buffer. The text can later be used in correlation. This ..."},"487":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr_ctrx_get_text_ocr.htm",l:-1,t:"ctrx_get_text_ocr",i:0.000312977503776258,a:"Retrieves the text in a rectangle using optical character recognition (OCR). Important! Optical character recognition might consume a substantial amount of the hardware resources of the Load Generator machine, thus causing high CPU consumption warnings and/or limiting amount of Vusers that might run ..."},"488":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_get_text_location.htm",l:-1,t:"ctrx_get_text_location",i:0.000284825670768812,a:"Searches for a text in a selected area and retrieves the text location. int ctrx_get_text_location( LPCSTR window_name, long *xpos, long *ypos, long *width, long *height, LPSTR text, long bMatchWholeWordOnly, LPCSTR filename, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_get_text_location searches for the ..."},"489":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_get_waiting_time.htm",l:-1,t:"ctrx_get_waiting_time",i:0.000284825670768812,a:"Gets current wait time. int ctrx_get_waiting_time( long * waitTime ); ctrx_get_waiting_time gets the current waiting time from the run time settings, or the value set with  ctrx_set_waiting_time . Return Values Citrix ICA Return Values Parameterization No parameterization is available for this ..."},"490":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_get_window_name.htm",l:-1,t:"ctrx_get_window_name",i:0.000312977503776258,a:"Retrieves the name of the active window. int ctrx_get_window_name( LPSTR buffer, [CONTINUE_ON_ERROR,] CTRX_LAST ); Use ctrx_get_window_name to retrieve the title of the window currently in focus. It is up to the user to allocate memory space for buffer before ctrx_get_window_name is invoked and to ..."},"491":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_get_window_position.htm",l:-1,t:"ctrx_get_window_position",i:0.000312977503776258,a:"Retrieves the position of a window. int ctrx_get_window_position( LPSTR title, long *xpos, long *ypos, long *width, long *height, [CONTINUE_ON_ERROR,] CTRX_LAST ); Use ctrx_get_window_position to retrieve the position of the window with the name title. If title is NULL then the function retrieves ..."},"492":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr_ctrx_key.htm",l:-1,t:"ctrx_key",i:0.000320811482668146,a:"Emulates a non-alphanumeric key press on a Citrix client sent to a Citrix server. int ctrx_key( char *key, long int key_modifier, [filename,] CTRX_LAST ); ctrx_key emulates a user pressing a non-alphanumeric key on a Citrix client. Return Values Citrix ICA Return Values Parameterization ..."},"493":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_list_select_item.htm",l:-1,t:"ctrx_list_select_item",i:0.000416861247693264,a:"Selects an item from a list. int ctrx_list_select_item( char *window_name, long xpos, long ypos, char *item, [CONTINUE_ON_ERROR,] CTRX_LAST ); The  ctrx_list_select_item  function selects an item from list. It supports lists of class ListBox or ComboBox. ctrx_list_select_item is available only if ..."},"494":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr_ctrx_logoff.htm",l:-1,t:"ctrx_logoff",i:0.00031095282437207,a:"Closes the current session. int ctrx_logoff( int force, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_logoff performs a normal logoff or a forced logoff, depending on the value of the force argument: CTRX_NORMAL_LOGOFF — Emulates real user logoff. Unresponsive applications or applications with unsaved data ..."},"495":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_menu_select_item.htm",l:-1,t:"ctrx_menu_select_item",i:0.000416861247693264,a:"Highlights a menu item. int ctrx_menu_select_item( char *window_name, char *menu_path, [CONTINUE_ON_ERROR,] CTRX_LAST) ; ctrx_menu_select_item highlights an item in a menu, but does not activate it. The window should be in the foreground when the ctrx_menu_select_item is called. ..."},"496":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr_ctrx_mouse_click.htm",l:-1,t:"ctrx_mouse_click",i:0.000307285240757087,a:"Emulates a mouse click on a Citrix client sent to a Citrix server. int ctrx_mouse_click( long x_pos, long y_pos, long mouse_button, long key_modifier, char *window_name, [CONTINUE_ON_ERROR,] CTRX_LAST ); int ctrx_obj_mouse_click( const char *obj_desc, long x_pos, long y_pos, long mouse_button, long ..."},"497":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_mouse_double_click.htm",l:-1,t:"ctrx_mouse_double_click",i:0.000308454837110349,a:"Emulates a double mouse click on a Citrix client sent to a Citrix server. int ctrx_mouse_double_click( long x_pos, long y_pos, long mouse_button, long key_modifier, char *window_name, [CONTINUE_ON_ERROR,] CTRX_LAST );  int ctrx_obj_mouse_double_click( const char *obj_desc, long x_pos, long y_pos, ..."},"498":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_mouse_down.htm",l:-1,t:"ctrx_mouse_down",i:0.000241106132083031,a:"Emulates a mouse down click on a Citrix client sent to a Citrix server. int ctrx_mouse_down( long x_pos, long y_pos, long mouse_button, long key_modifier, char *window_name, [CONTINUE_ON_ERROR,] CTRX_LAST ); int ctrx_obj_mouse_down( const char *obj_desc, long x_pos, long y_pos, long mouse_button, ..."},"499":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_mouse_move.htm",l:-1,t:"ctrx_mouse_move",i:0.000241106132083031,a:"Emulates a mouse move on a Citrix client sent to a Citrix server. int ctrx_mouse_move( long x_pos, long y_pos, long mouse_button, long key_modifier, CTRX_LAST );  int ctrx_obj_mouse_move( const char * obj_desc, long x_pos, long y_pos, long mouse_button, long key_modifier, CTRX_LAST ); ..."},"500":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_mouse_up.htm",l:-1,t:"ctrx_mouse_up",i:0.000241106132083031,a:"Emulates a mouse up click on a Citrix client sent to a Citrix server. int ctrx_mouse_up( long x_pos, long y_pos, long mouse_button, long key_modifier, char *window_name , [CONTINUE_ON_ERROR,] CTRX_LAST ); int ctrx_obj_mouse_up( const char *obj_desc, long x_pos, long y_pos, long mouse_button, long ..."},"501":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_nfuse_connect.htm",l:-1,t:"ctrx_nfuse_connect",i:0.000396042941219233,a:"Connects to a Citrix server via an NFUSE portal. int ctrx_nfuse_connect( char *url , [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_nfuse_connect establishes a connection with the Citrix server using the NFUSE application portal. Specifications found in the ICA file defining the personalized specifications ..."},"502":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx__obj__get_info.htm",l:-1,t:"ctrx_\u003cobj\u003e_get_info",i:0.000284825670768812,a:"ctrx_button_get_info ctrx_edit_get_info ctrx_list_get_info  Gets class information about the object. int ctrx_obj_get_info( const char *window_name, long xpos, long ypos, eObjAttribute attribute, char *value, [CONTINUE_ON_ERROR,] CTRX_LAST ); The ctrx_\u003cobj\u003e_get_info family of functions assign the ..."},"503":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_run_published_app.htm",l:-1,t:"ctrx_run_published_app",i:0.000334542327466839,a:"Invokes a published application. int ctrx_run_published_app( char *app_name, char *app_args, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_run_published_app invokes a published application, within a connected Citrix session. You can invoke use this function to invoke multiple applications during your ..."},"504":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_set_connect_opt.htm",l:-1,t:"ctrx_set_connect_opt",i:0.000653059601701313,a:"Sets a connection option to a Citrix ICA server and then connects to server. int ctrx_set_connect_opt( eConnectionOption option, char *value); ctrx_set_connect_opt sets a connection option prior to establishing a connection from a Citrix client to a Citrix server, and then executes the connection to ..."},"505":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_set_exception.htm",l:-1,t:"ctrx_set_exception",i:0.000263451072805042,a:"ctrx_set_exception Specifies exception handling. Deprecated. Use  ctrx_execute_on_window ."},"506":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_set_waiting_time.htm",l:-1,t:"ctrx_set_waiting_time",i:0.000339911727565555,a:"Sets the waiting time for all Citrix ICA wait functions. int ctrx_set_waiting_time( long waitTime ); ctrx_set_waiting_time changes the waiting time of the  Citrix Synchronization Functions  from the default 60 seconds. This function does not change the waiting time of the  Connection Functions  that ..."},"507":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_set_window.htm",l:-1,t:"ctrx_set_window",i:0.000486838587696704,a:"Waits for a window to appear in the Citrix client. int ctrx_set_window( char *window_name, [window_state,] [CONTINUE_ON_ERROR,] CTRX_LAST ); When emulating a GUI user, a window must appear before it can be used. ctrx_set_window is a synchronization function that waits for a window to appear before ..."},"508":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_set_window_ex.htm",l:-1,t:"ctrx_set_window_ex",i:0.000289052696618944,a:"Waits a specified time for a window to appear in the Citrix client. int ctrx_set_window_ex( char *window_name, long waitTime, [CONTINUE_ON_ERROR,] CTRX_LAST ); When emulating a GUI user, a window must appear before it can be used. ctrx_set_window_ex is a synchronization function that waits up to ..."},"509":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_save_bitmap.htm",l:-1,t:"ctrx_save_bitmap",i:0.000367608269219129,a:"Saves the demarcated bitmap in a buffer. int ctrx_save_bitmap( long x_start, long y_start, long width, long height, const char *file_name );  ctrx_save_bitmap saves the bitmap to a file. The file is saved in the Vuser results log directory. Return Values Citrix ICA Return Values Parameterization The ..."},"510":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_sync_on_bitmap.htm",l:-1,t:"ctrx_sync_on_bitmap",i:0.00030646990557482,a:"Waits until a bitmap appears. int ctrx_sync_on_bitmap( long x_start, long y_start,long width, long height, char *hash, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_sync_on_bitmap is a synchronization function that waits for a specified bitmap to appear before continuing.  This function is typically used ..."},"511":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_sync_on_bitmap_change.htm",l:-1,t:"ctrx_sync_on_bitmap_change",i:0.000241344394435917,a:"Waits until a bitmap changes. int ctrx_sync_on_bitmap_change( long x_start, long y_start, long width, long height, [int Initial Wait Time,] [int Timeout,] [const char * Initial Value,] [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_sync_on_bitmap_change is a synchronization function that waits for a ..."},"512":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_sync_on_obj_info.htm",l:-1,t:"ctrx_sync_on_obj_info",i:0.000263052898148885,a:"Wait until the specified object\u0027s attributes have the specified value int ctrx_sync_on_obj_info( char *window_name, long xpos, long ypos,eObjAttribute attribute, char *value, [CONTINUE_ON_ERROR,] CTRX_LAST ); When ctrx_sync_on_obj_info is called, execution pauses until the attribute of the specified ..."},"513":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_sync_on_text.htm",l:-1,t:"ctrx_sync_on_text",i:0.000263052898148885,a:"Waits until specified text is displayed around the specified position. int ctrx_sync_on_text( long xpos, long ypos, const char *value, eObjAttribute textEvent, const char *window_name, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_sync_on_text is a synchronization function that waits for a specified string ..."},"514":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_sync_on_text_ex.htm",l:-1,t:"ctrx_sync_on_text_ex",i:0.000263052898148885,a:"Waits until specified text is displayed in the specified area. int ctrx_sync_on_text_ex( long xpos, long ypos, long width, long height, const char *value, const char *window_name, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_sync_on_text_ex is a synchronization function that waits for a specified string ..."},"515":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr_ctrx_sync_on_text_ocr.htm",l:-1,t:"ctrx_sync_on_text_ocr",i:0.000289052696618944,a:"Waits until specified text is displayed in the specified rectangle, using optical character recognition (OCR). Important! Optical character recognition might consume a substantial amount of the hardware resources of the Load Generator machine, thus causing high CPU consumption warnings and/or ..."},"516":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_sync_on_window.htm",l:-1,t:"ctrx_sync_on_window",i:0.000388250521875812,a:"Waits until a window is created or becomes active. int ctrx_sync_on_window( char *window_name, eWindowEvent event, long x_start, long y_start, long width, long height, char *filename, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_sync_on_window is a synchronization function that waits for a window to ..."},"517":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr_ctrx_type.htm",l:-1,t:"ctrx_type",i:0.000371545168072714,a:"Emulates typing alphanumeric keys. int ctrx_type( char *data, [filename,] CTRX_LAST ); The function ctrx_type emulates a user typing alphanumeric characters. During recording, alphanumeric key presses are recorded until some other type of keyboard activity, such as mouse clicks or non-alphanumeric ..."},"518":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_unset_window.htm",l:-1,t:"ctrx_unset_window",i:0.000249583157143421,a:"Waits for a window to close in the Citrix client. int ctrx_unset_window( char *window_name, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_unset_window is a synchronization function that waits for a window to close before the test run continues.  The window_name argument indicates the name of the window as ..."},"519":{y:0,u:"../Content/FuncRef/citrix_ica/lrFr_ctrx_wait_for_event.htm",l:-1,t:"ctrx_wait_for_event",i:0.000289052696618944,a:"Waits for a specified event to occur. int ctrx_wait_for_event( char *event, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_wait_for_event is a synchronization function that waits for an event to occur.  Session initialization and CitrixAgent initialization  may take longer than LOGON. As a result, ctrx* ..."},"520":{y:0,u:"../Content/FuncRef/citrix_ica/lrFuncRef_ctrx_win_exist.htm",l:-1,t:"ctrx_win_exist",i:0.000263052898148885,a:"Checks if a window is visible on the screen. int ctrx_win_exist( char *window_name, long waiting_time, [CONTINUE_ON_ERROR,] CTRX_LAST ); ctrx_win_exist returns E_OK (zero) if the window exists. The wildcard character (*) can be used in window_name. Return Values Citrix ICA Return Values ..."},"521":{y:0,u:"../Content/FuncRef/citrix_ica/etc/lrFuncRef_cit_Connection_Funcs.htm",l:-1,t:"Connection Functions",i:0.000691916403973748,a:"Connection Functions Click one of the following functions for more information:"},"522":{y:0,u:"../Content/FuncRef/citrix_ica/etc/lrFuncRef_cit_General_Funcs.htm",l:-1,t:"General Functions",i:0.000745021729148297,a:"General Functions Click the following for more information"},"523":{y:0,u:"../Content/FuncRef/citrix_ica/etc/lrFuncRef_cit_Info_Retrvl_Funcs.htm",l:-1,t:"Information Retrieval Functions",i:0.00113239490555932,a:"Information Retrieval Functions Click the following for more information"},"524":{y:0,u:"../Content/FuncRef/citrix_ica/etc/lrFuncRef_cit_Keyboard_Funcs.htm",l:-1,t:"Keyboard Functions",i:0.000304650947717735,a:"Keyboard Functions Click one of the following functions for more information:"},});