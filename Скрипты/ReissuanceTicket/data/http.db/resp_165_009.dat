define({"0":{y:0,u:"../Content/FuncRef/Landing Page.htm",l:-1,t:"VuGen Function Reference",i:0.000132341366777373,a:"Introducing the VuGen 2020 Function Reference Welcome to the Virtual User Generator (VuGen) Function Reference. The Function Reference provides descriptions and examples for functions that are used with supported protocols in VuGen test scripts. They can also be used in test scripts that are used ..."},"1":{y:0,u:"../Content/FuncRef/Index_A_G.htm",l:-1,t:"Index A-G",i:0.000160464094035703,a:"ajax_accordion ajax_autocomplete ajax_collapsiblepanel ajax_rating ajax_reorderlist ajax_slider ajax_tabs amf_call amf_define_envelope_header_set amf_set_version ctrx_activate_window ctrx_connect_server ctrx_execute_on_window ctrx_get_bitmap_value ctrx_get_server_name ctrx_get_text ctrx_get_text_ocr ..."},"2":{y:0,u:"../Content/FuncRef/Index_H-M.htm",l:-1,t:"Index H-M",i:0.000160464094035703,a:"imap_set_max_param_len imap_set_max_param_len imap_set_max_param_len_ex imap_append imap_append_ex imap_check imap_check_ex imap_close imap_close_ex imap_copy imap_copy_ex imap_create imap_create_ex imap_custom_request imap_custom_request_ex imap_delete imap_delete_ex imap_examine imap_examine_ex ..."},"3":{y:0,u:"../Content/FuncRef/Index_N-V.htm",l:-1,t:"Index N-V",i:0.000160464094035703,a:"nca_configurator_parameterize_data nca_configurator_parameterize_url nca_configurator_set_ui_data nca_configurator_start nca_get_active_timers_count nca_java_action nca_java_set_option nca_list_close nca_list_select_item nca_lov_get_item_name nca_lov_select_index_item nca_message_box_press ..."},"4":{y:0,u:"../Content/FuncRef/Index_W-Z.htm",l:-1,t:"Index W-Z",i:0.000160464094035703,a:"web.addAutoFilter web.addAutoHeader web.addCookie web.addCookieEx web.addFilter web.addHeader web.cacheCleanup web.cleanupAutoHeaders web.cleanupCookies web.concurrentEnd web.concurrentStart web.convertFromFormatted web.convertToFormatted web.customRequest web.disableKeepAlive web.dumpCache ..."},"5":{y:0,u:"../Content/FuncRef/_Direct/lrFuncRef_Util_Funcs_cat.htm",l:-1,t:"Utility Functions and C Language Reference",i:0.000132341366777373,a:"The following sections contain general utility functions. Utility Functions: C Language (lr_) Utility Functions: Java Language (lr.) Utility Functions: .NET (lr.) Utility Functions: Socket ID Functions (get_) Utility Functions: VB Script, Javascript (lr.) C Language Functions XML Functions (LR_XML)"},"6":{y:0,u:"../Content/FuncRef/c_language/etc/lrFuncRef_C_Lng_Funcs_cat.htm",l:-1,t:"C Language Functions",i:0.000148411496639276,a:"Many standard C Runtime functions can be used in Vuser scripts that are in the C language. Expand the categories to locate the desired function. String Manipulation Functions Buffer Manipulation Functions Process Control Functions Memory Allocation Functions Mathematics Functions Input-Output ..."},"7":{y:0,u:"../Content/FuncRef/c_language/etc/lrFuncRef_CLang_Alphabetical_List.htm",l:-1,t:"Alphabetical Listing of C Functions",i:0.000142045261274412,a:"Alphabetical Listing of C Functions Click on a function for more information:"},"8":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_abs.htm",l:-1,t:"abs",i:0.000234125656454432,a:"abs Gets the absolute value of an integer.  int abs( int n); Return Values The absolute value of the integer. For abs details, refer to your C language documentation."},"9":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_asctime.htm",l:-1,t:"asctime",i:0.000222907153877675,a:"Converts time from a structure to a string.  char *asctime( const struct tm *tmTime); Under Linux, asctime is not thread-safe. Use asctime_r, instead. Refer to your platform-specific documentation for details. Return Values A pointer to the string containing the date and time information in readable ..."},"10":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_atof.htm",l:-1,t:"atof",i:0.000257147450337871,a:"Converts a string to a floating point value. double atof( const char *string); atof reads the initial portion of the string only, by stopping at the first non-numerical character.  Return Values The converted floating point value of the input string. On overflow the result is undefined. If an error ..."},"11":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_atol.htm",l:-1,t:"atol",i:0.000257147450337871,a:"Converts a string to a long integer value.  long atol( const char *string); atol reads the initial portion of the string only, by stopping at the first non-numerical character.  Return Values The converted long integer value of the input string. On overflow the result is undefined. If an error ..."},"12":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_auto.htm",l:-1,t:"auto",i:0.000136236182475529,a:"auto A  Storage-Class Specifier  used within a function. A local function variable declared with auto has a local lifetime. This is the default."},"13":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_break.htm",l:-1,t:"break",i:0.000136236182475529,a:"break Causes the execution of the current switch or loop body to terminate. The break statement may only appear in the body of a switch or loop statement. "},"14":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_calloc.htm",l:-1,t:"calloc",i:0.000288343022436803,a:"Allocates an array and initializes all elements to zero.  void *calloc( size_t num elems, size_t elem_size);  Return Values Returns a void * type pointer to the allocated space. If the system could not allocate the requested block of memory or if any of the parameters was 0, returns a NULL pointer.  ..."},"15":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_case.htm",l:-1,t:"case",i:0.000136236182475529,a:"case Used within a switch statement to control conditional operations. Control passes to the operation whose case statement matches the value of switch(expression)."},"16":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_char.htm",l:-1,t:"char",i:0.000136236182475529,a:"char Defines a variable to store a character. The value is either signed or nonnegative, depending on the  Type-Specifier ."},"17":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_chdir.htm",l:-1,t:"chdir",i:0.000261842893434283,a:"chdir Changes the current directory to the given path. (Windows only) int chdir( const char *path); For chdir details, refer to your C language documentation. Return Values This function returns zero upon success and (-1) for failure. "},"18":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_chdrive.htm",l:-1,t:"chdrive",i:0.000261842893434283,a:"chdrive Switches to another drive on a Windows operating system. int  chdrive( int drive);  chdrive changes the current working drive to be drive, an integer representing the new drive. (1 = A, 2 = B, etc.) Return Values The chdrive function returns zero on success and (-1) for failure."},"19":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_const.htm",l:-1,t:"const",i:0.00025203771169332,a:"Defines a variable which cannot be modified by any other part in the code. You place the keyword const in front of any variable declaration. If the keyword volatile is placed after const, then this allows external routines to modify the variable (such as hardware devices). This also forces the ..."},"20":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_default.htm",l:-1,t:"default",i:0.000136236182475529,a:"default Provides a default value for an expression in a  switch  statement, if the variable being evaluated is not equal to any of the cases."},"21":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_continue.htm",l:-1,t:"continue",i:0.000136236182475529,a:"continue The continue keyword passes control to the nearest iteration of the loop in which it is enclosed."},"22":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_cos.htm",l:-1,t:"cos",i:0.000234125656454432,a:"cos Computes the cosine of an angle in radians.  double cos( double x);  Return Values The cosine of the specified angle. "},"23":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_ctime.htm",l:-1,t:"ctime",i:0.000222907153877675,a:"Converts the system time to local time.  char *ctime( const time_t *calTime); Under Linux, ctime is not thread-safe. Use ctime_r, instead. Refer to your platform-specific documentation for details. Return Values A pointer to the string containing the date and time information in readable format."},"24":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_do.htm",l:-1,t:"do",i:0.000136236182475529,a:"do The do...while construct provides an iterative loop. Use it in conjunction with the while keyword. do statement... while( expression );  statement is executed repeatedly as long as expression is true. The test on expression takes place after each execution of statement."},"25":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_double.htm",l:-1,t:"double",i:0.000136236182475529,a:"double Defines a double precision floating point number of 8 bytes. It accepts numbers in the range of 1.7 e +/- 308 (15 digits). For more information, see  Type-Specifier ."},"26":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_else.htm",l:-1,t:"else",i:0.000285538108415475,a:"else Provides an alternate statement for an if condition. In an  if  statement, if the expression is true, then if\u0027s statement is executed. If an else clause is given and if the expression is false, then the else\u0027s statement is executed.  if( expression ) statement1; else statement2;"},"27":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_enum.htm",l:-1,t:"enum",i:0.000136236182475529,a:"Creates an enumeration specifier. Enumeration allows a series of constant integers to be easily assigned. The format to create a enumeration specifier is:  enum identifier {enumerator-list}; Identifier is a handle for identification, and is optional. Enumerator-list is a list of variables to be ..."},"28":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fclose.htm",l:-1,t:"fclose",i:0.000230445453138951,a:"fclose Closes a file. int fclose( FILE *file_pointer); Return Values If the stream is successfully closed, returns 0. If an error occurs, returns EOF.  For fclose details, refer to your C language documentation."},"29":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_feof.htm",l:-1,t:"feof",i:0.000230445453138951,a:"feof Checks if the end of file has occurred on a stream.  int feof( FILE *file_pointer); Return Values Returns a non-zero value when the position indicator reaches the End Of File in the last input operation with the specified stream. Otherwise, returns 0. "},"30":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_ferror.htm",l:-1,t:"ferror",i:0.000230445453138951,a:"ferror Checks if any error has occurred during file I/0.  int ferror( FILE *file_pointer); Return Values If there were no errors, returns 0. Otherwise, returns a non-zero value and the error indicator of the stream remains set.  For ferror details, refer to your C language documentation."},"31":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fgetc.htm",l:-1,t:"fgetc",i:0.000230445453138951,a:"fgetc Gets a character from a stream.  int fgetc( FILE *file_pointer); Return Values Returns the requested character. If the End Of File is reached or if a reading error occurred, it returns an EOF character. "},"32":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fgets.htm",l:-1,t:"fgets",i:0.000230445453138951,a:"fgets Reads a string from a file.  char *fgets( char *string, int maxchar, FILE *file_pointer); Return Values Upon success, it returns the read string. If the End Of File is reached or if a reading error occurred, it returns a null pointer."},"33":{y:0,u:"../Content/FuncRef/c_language/lrFr_float.htm",l:-1,t:"float",i:0.000136236182475529,a:"float Defines a floating point number in 4 bytes, in the range of 3.4e +/-38 (7 digits). See  Type-Specifier  for more information."},"34":{y:0,u:"../Content/FuncRef/c_language/lrFr_floor.htm",l:-1,t:"floor",i:0.000234125656454432,a:"floor Gets the largest integer value less than the specified number.  double floor( double x);  Return Values The floor of x."},"35":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fopen.htm",l:-1,t:"fopen",i:0.000441368452751485,a:"Opens a file for buffered I/0. long fopen( const char *filename, const char *access_mode); The fopen access_mode parameter serves also to specify whether we want to open the file as text or binary, adding t or b characters to this access mode string.  Return Values If the file has been successfully ..."},"36":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_for.htm",l:-1,t:"for",i:0.000136236182475529,a:"A control flow keyword used to perform an action repeatedly.  for (initial_expression, conditional_expression, loop_expression) All three expressions in the for statement are evaluated. If the initial or conditional expressions are false or become false, the for loop terminates. The ..."},"37":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fprintf.htm",l:-1,t:"fprintf",i:0.000230445453138951,a:"fprintf Writes formatted output to a file. int fprintf( FILE *file_pointer, const char *format_string [, args ] ); Return Values On success, returns the Total number of characters printed. On error, returns a negative number. For fprintf details, refer to your C language documentation."},"38":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fputc.htm",l:-1,t:"fputc",i:0.000230445453138951,a:"fputc Writes a character to a stream.  int fputc( int c, FILE *file_pointer); Return Values If there are no errors, returns the written character. If an error occurs, returns EOF."},"39":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fread.htm",l:-1,t:"fread",i:0.000230445453138951,a:"Reads unformatted data from a stream into a buffer.  size_t fread( void *buffer, size_t size, size_t count, FILE *file_pointer); Return Values Returns the Total number of items read. If this number differs from the requested amount (count parameter) an error has occurred or End Of File has been ..."},"40":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_free.htm",l:-1,t:"free",i:0.000288343022436803,a:"free Frees a block of memory allocated on the memory heap by calloc or malloc.  void free( void *mem_address);  Return Values There is no return value. For free details, refer to your C language documentation."},"41":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fscanf.htm",l:-1,t:"fscanf",i:0.000230445453138951,a:"Reads formatted input from a stream.  int fscanf( FILE *file_pointer, const char *format string [, args]); For fscanf details, refer to your C language documentation. Return Values The number of items successfully read. This count does not include any ignored fields. If EOF is returned, an error has ..."},"42":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fseek.htm",l:-1,t:"fseek",i:0.000230445453138951,a:"fseek Sets the current position in a file to a new location.  int fseek( FILE *file_pointer, long offset, int origin); For fseek details, refer to your C language documentation. Return Values If successful, the function returns 0. Otherwise it returns non-zero. "},"43":{y:0,u:"../Content/FuncRef/c_language/lrFr_ftell.htm",l:-1,t:"ftell",i:0.000455383300165286,a:"Returns the current file position of the given stream.  long int ftell( FILE *stream ) For ftell details, refer to your C language documentation. Return Values Returns the current value of the position indicator. On error, returns -1 and the global variable errno is set to a positive value. Example ..."},"44":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_fwrite.htm",l:-1,t:"fwrite",i:0.000230445453138951,a:"fwrite Write unformatted data from a buffer to a stream.  size_t fwrite( const void *buffer, size_t size, size_t count, FILE *file_pointer); Return Values If successful, the function returns the number of full items (not bytes) successfully written."},"45":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_getcwd.htm",l:-1,t:"getcwd",i:0.000261842893434283,a:"getcwd Returns the name of the current working directory.  char *getcwd( char *path, int numchars); For getcwd details, refer to your C language documentation. Return Values This function returns zero upon success and (-1) for failure. "},"46":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_getdrive.htm",l:-1,t:"getdrive",i:0.000261842893434283,a:"getdrive Returns the name of the current drive. Windows only. int getdrive( void);  The getdrive function returns an integer representing the drive letter: 1 = A, 2 = B, etc. Return Values This function returns zero upon success and (-1) for failure. "},"47":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_getenv.htm",l:-1,t:"getenv",i:0.00054210795620148,a:"getenv Gets the definition of an environment variable.  char *getenv( const char *varname );  Return Values Gets the value of the specified environment variable or NULL if that environment variable does not exist. For getenv details, refer to your C language documentation."},"48":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_gmtime.htm",l:-1,t:"gmtime",i:0.000222907153877675,a:"gmtime Converts the system time into Coordinated Universal Time (UTC). struct tm *gmtime( const time_t *calTime); Under Linux, gmtime is not thread-safe. Use gmtime_r, instead. Refer to your platform-specific documentation for details. Return Values A pointer to a tm structure."},"49":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_goto.htm",l:-1,t:"goto",i:0.000136236182475529,a:"goto Performs an absolute jump to another point in the program. The destination point is identified by a label which is the argument for the goto instruction. A label consists of a valid identifier followed by a colon.  gotolabel; .... label:"},"50":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_if.htm",l:-1,t:"if",i:0.00025759094305717,a:"if An control flow logic function used to execute an instruction or a block of instructions only if a condition is fulfilled. If the condition in the parentheses following the if is true, the instructions are executed. if( expression ) statement1; or if( expression ) statement1; elsestatement2 ;"},"51":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_int.htm",l:-1,t:"int",i:0.000136236182475529,a:"int Defines a signed integer variable. (Unless a  Type-Specifier  is used such as long int)."},"52":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_isalpha.htm",l:-1,t:"isalpha",i:0.000427560135479592,a:"isalpha Checks if an integer value is a alphabetic letter. int isalpha( int c);  The function isalpha checks to see if the value of c falls within the ranges A - Z or a - z. Return Values This function returns a non-zero value (true) if the character is a letter, zero (false) if it is not."},"53":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_isdigit.htm",l:-1,t:"isdigit",i:0.000278258209539646,a:"isdigit Checks if a string is a decimal digit (characters `0\u0027 to `9\u0027).  int isdigit( int c ); For isdigit details, refer to your C language documentation. Return Values This function returns a non-zero value (true) if the character is a decimal digit, zero (false) if it is not. "},"54":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_localtime.htm",l:-1,t:"localtime",i:0.000222907153877675,a:"localtime Converts the calendar time into local time.  struct tm *localtime( const time_t *calTime); Under Linux, localtime is not thread-safe. Use localtime_r, instead. Refer to your platform-specific documentation for details. Return Values A pointer to a tm structure."},"55":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_long.htm",l:-1,t:"long",i:0.000136236182475529,a:"long A  Type-Specifier  that defines a variable as a long signed integer. "},"56":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_malloc.htm",l:-1,t:"malloc",i:0.000508969916546376,a:"Allocates a block of memory.  void *malloc( size_t num_bytes);  Return Values Returns a void type pointer to the allocated space. If the system could not allocate the requested block of memory or if num_bytes is 0, returns a NULL pointer.  You must free the memory when you are finished with it: ..."},"57":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_memchr.htm",l:-1,t:"memchr",i:0.000260391924408283,a:"memchr Searches for a character in a buffer.  void *memchr( const void *s, int c, size_t n); Return Values A pointer to the first occurrence of c in buffer. If character is not found the function returns NULL. For memchr details, refer to your C language documentation."},"58":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_memcmp.htm",l:-1,t:"memcmp",i:0.000260391924408283,a:"memcmp Compares two memory buffers.  int memcmp( const void *s1, const void *s2, size_t n);  Return Values Returns the value indicating the relationship between the buffers:  For memcmp details, refer to your C language documentation."},"59":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_memcpy.htm",l:-1,t:"memcpy",i:0.000260391924408283,a:"memcpy Copies characters from one buffer to another. void *memcpy( void *dest, const void *src, size_t n );  The memcpy function copies n characters from the src buffer to the dest buffer. Return Values Returns dest, the destination buffer to where the data is copied."},"60":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_memmove.htm",l:-1,t:"memmove",i:0.000260391924408283,a:"memmove Moves a number of bytes from one buffer to another.  void *memmove( void *dest, const void *src, size_t n );  Return Values Returns dest, the destination buffer to where the data is copied."},"61":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_memset.htm",l:-1,t:"memset",i:0.000633021878343746,a:"memset Sets n bytes of a buffer to a given character.  void *memset( void *buffer, int c, size_t n);  Return Values Returns buffer, pointer to block of data to be filled with c. For memset details, refer to your C language documentation."},"62":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_mkdir.htm",l:-1,t:"mkdir",i:0.000261842893434283,a:"mkdir Creates a directory using the given path name. int mkdir( const char *path); For mkdir details, refer to your C language documentation. Return Values This function returns zero upon success and (-1) for failure."},"63":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_putenv.htm",l:-1,t:"putenv",i:0.000315602715969983,a:"putenv Inserts a new definition into an environment table.  int putenv( const char *envstring);  Return Values 0 if successful and -1 in case of error. For putenv details, refer to your C language documentation."},"64":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_rand.htm",l:-1,t:"rand",i:0.000326156896644263,a:"rand Gets a random integer between 0 and 32767.  int rand( void );  Before invoking rand, call  srand  to seed the pseudo-random number generator. Return Values Returns a pseudo-random integer in the range 0 to 32767."},"65":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_realloc.htm",l:-1,t:"realloc",i:0.000288343022436803,a:"Reallocates (adjusts the size of) a block of memory.  void *realloc( void *mem_address, size_t size);  Return Values Returns a void * type pointer to the allocated space. If the system could not allocate the requested block of memory or if any of the parameters was 0, returns a NULL pointer. For ..."},"66":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_register.htm",l:-1,t:"register",i:0.000136236182475529,a:"A  Storage-Class Specifier  that defines a local variables to be stored in a register instead of RAM. This means that the variable has a maximum size equal to the register size (usually one word) and may not have the unary \u0027\u0026\u0027 operator applied to it (as it does not have a memory location).  You ..."},"67":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_remove.htm",l:-1,t:"remove",i:0.000468926838421886,a:"remove Deletes the specified file.  int remove( const char *path); For remove details, refer to your C language documentation. Return Values The function returns zero on success and -1 on failure. It also sets the global variable errno to indicate the specific error."},"68":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_return.htm",l:-1,t:"return",i:0.000136236182475529,a:"return [ expression ]; Causes the current function to terminate. It can return a value to the calling function. A return statement can appear in a function whose return type is void. If the value returned has a type different from that of the function\u0027s return type, then the value is converted. ..."},"69":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_rewind.htm",l:-1,t:"rewind",i:0.000230445453138951,a:"rewind Rewinds a file.  void rewind( FILE *file_pointer);  For rewind details, refer to your C language documentation. Return Values This function has no return value."},"70":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_rmdir.htm",l:-1,t:"rmdir",i:0.000261842893434283,a:"rmdir Deletes the specified directory.  int rmdir( const char *path); For rmdir details, refer to your C language documentation. Return Values The function returns zero on success and -1 on failure. It also sets the global variable errno to indicate the specific error."},"71":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_short.htm",l:-1,t:"short",i:0.000136236182475529,a:"short Used in an int variable declaration to reduce the size of the integer to 16 bits -32,768 to 32,767. Note that this is the default size, if no other  Type-Specifier  is used."},"72":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_signed.htm",l:-1,t:"signed",i:0.000136236182475529,a:"Used in variable declarations as a  Type-Specifier  to indicate that the variable may be marked with a negative sign, not limiting the minimum value to 0. It applies to char, int, and long data types. This is the default type-specifier. The following table illustrates the difference between signed ..."},"73":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_sin.htm",l:-1,t:"sin",i:0.000234125656454432,a:"sin Computes the sine of an angle in radians.  double sin( double x); Return Values The sine of the specified angle. "},"74":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_sizeof.htm",l:-1,t:"sizeof",i:0.000136236182475529,a:"sizeof Returns the number of bytes of the given expression or type. The result size_t, is of an unsigned integer type.  size_t sizeof expression or  size_t sizeof (type) "},"75":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_sprintf.htm",l:-1,t:"sprintf",i:0.000230445453138951,a:"Writes formatted output to a string.  int sprintf( char *string_buffer, const char *format_string[, args]); For sprintf details, refer to your C language documentation. The target string_buffer must be large enough to contain the result of the format_string and args. Buffer overflow if the result ..."},"76":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_sqrt.htm",l:-1,t:"sqrt",i:0.000234125656454432,a:"sqrt Computes the square root of x.  double sqrt( double x); Return Values The square root of the specified number.  "},"77":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_srand.htm",l:-1,t:"srand",i:0.000324812862361457,a:"srand Seeds the pseudo-random number generator.  int srand( seedTime );  Before invoking  rand , call srand to seed the pseudo-random number generator. Return Value Returns a pseudo-random integer in the range 0 to 32767."},"78":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_sscanf.htm",l:-1,t:"sscanf",i:0.000230445453138951,a:"Reads formatted input from a string.  int sscanf( const char *buffer, const char *format_string, args); For sscanf details, refer to your C language documentation. Return Values If successful, the function returns the number of items successfully read. This count does not include any ignored fields."},"79":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_static.htm",l:-1,t:"static",i:0.000136236182475529,a:"static The default  Storage-Class Specifier  for global variables which makes the variable available only to functions within the current file. You can also define a static variable within a function. The variable is initialized at compilation time and retains it value between calls."},"80":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_strcat.htm",l:-1,t:"strcat",i:0.000248818851372236,a:"strcat Concatenates two strings.  char *strcat( char *to, const char *from ); Return Values Pointer to the concatenated string (null-terminated). "},"81":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_strchr.htm",l:-1,t:"strchr",i:0.000248818851372236,a:"Returns the pointer to the first occurrence of a character in a string.  char *strchr( const char *string, int c); Return Values strchr returns the pointer to the first occurrence of a character in a string. If character is found, returns a pointer to the first occurrence of c in string. If not, it ..."},"82":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_strcmp.htm",l:-1,t:"strcmp",i:0.000248818851372236,a:"strcmp Compares string1 and string2 to determine the alphabetic order.  int strcmp( constchar *string1, const char *string2 ); Return Values Returns a value indicating the lexicographical relation between the strings: "},"83":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_strcpy.htm",l:-1,t:"strcpy",i:0.000248818851372236,a:"strcpy Copies one string to another.  char *strcpy( char *dest, const char *source);  Return Values Returns the destination string.  "},"84":{y:0,u:"../Content/FuncRef/c_language/lrFuncRef_CLang_strdup.htm",l:-1,t:"strdup",i:0.000248818851372236,a:"strdup Duplicates a string. char *strdup( const char *string);  Return Values strdup returns the duplicated string."},});